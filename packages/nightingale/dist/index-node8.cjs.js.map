{"version":3,"file":"index-node8.cjs.js","sources":["../src/config.ts","../src/index.ts"],"sourcesContent":["/* eslint-disable no-restricted-globals */\nimport { POB_ENV } from 'pob-babel';\nimport { Handler, Processor } from 'nightingale-types';\nimport { ComputedConfigForKey } from 'nightingale-logger';\n\nexport interface Config {\n  handler?: Handler;\n  handlers?: Array<Handler>;\n  key?: string;\n  keys?: Array<string>;\n  pattern?: RegExp;\n  processor?: Processor;\n  processors?: Array<Processor>;\n  stop?: boolean;\n}\n\ndeclare const global: any;\n\nif (POB_ENV !== 'production' && global.__NIGHTINGALE_GLOBAL_HANDLERS) {\n  // eslint-disable-next-line no-console\n  throw new Error('nightingale: update all to ^5.0.0');\n}\n\nif (!global.__NIGHTINGALE_CONFIG) {\n  global.__NIGHTINGALE_CONFIG = [];\n  global.__NIGHTINGALE_LOGGER_MAP_CACHE = new Map();\n  global.__NIGHTINGALE_CONFIG_DEFAULT = { handlers: [], processors: [] };\n}\n\nfunction clearCache() {\n  global.__NIGHTINGALE_LOGGER_MAP_CACHE.clear();\n}\n\nfunction handleConfig(config: Config) {\n  if (config.keys) {\n    if (config.pattern) {\n      throw new Error('Cannot have key and pattern for the same config');\n    }\n    if (config.key) {\n      throw new Error('Cannot have key and keys for the same config');\n    }\n  } else if (config.key) {\n    if (config.pattern) {\n      throw new Error('Cannot have key and pattern for the same config');\n    }\n    config.keys = [config.key];\n    delete config.key;\n  }\n\n  if (config.handler) {\n    if (config.handlers) {\n      throw new Error('Cannot have handler and handlers for the same config');\n    }\n    config.handlers = [config.handler];\n    delete config.handler;\n  }\n\n  if (config.processor) {\n    if (config.processors) {\n      throw new Error('Cannot have processors and processors for the same config');\n    }\n    config.processors = [config.processor];\n    delete config.processor;\n  }\n\n  return config;\n}\n\nexport function configure(config: Array<Config>) {\n  if (global.__NIGHTINGALE_CONFIG.length !== 0) {\n    // eslint-disable-next-line no-console\n    console.log('nightingale: warning: config overridden');\n  }\n\n  clearCache();\n  global.__NIGHTINGALE_CONFIG = config.map(handleConfig);\n}\n\nexport function addConfig(config: Config, unshift = false) {\n  config = handleConfig(config);\n  global.__NIGHTINGALE_CONFIG[unshift ? 'unshift' : 'push'](config);\n  clearCache();\n}\n\nconst configIsForKey = (key: string) => (config: Config) => {\n  if (config.keys) return config.keys.includes(key);\n  if (config.pattern) return config.pattern.test(key);\n  return true;\n};\n\nglobal.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = (key: string) => {\n  const globalCache = global.__NIGHTINGALE_LOGGER_MAP_CACHE;\n\n  if (globalCache.has(key)) {\n    return globalCache.get(key);\n  }\n\n  const loggerConfig: ComputedConfigForKey = {\n    handlers: [],\n    processors: [],\n  };\n\n  global.__NIGHTINGALE_CONFIG.filter(configIsForKey(key)).some((config: Config) => {\n    if (config.handlers) loggerConfig.handlers.push(...config.handlers);\n    if (config.processors) loggerConfig.processors.push(...config.processors);\n    return config.stop;\n  });\n\n  globalCache.set(key, loggerConfig);\n  return loggerConfig;\n};\n\nif (global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = (\n    key: string,\n    level: number,\n  ): ComputedConfigForKey => {\n    const {\n      handlers,\n      processors,\n    }: ComputedConfigForKey = global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n    return {\n      handlers: handlers.filter(\n        (handler: Handler) =>\n          level >= handler.minLevel && (!handler.isHandling || handler.isHandling(level, key)),\n      ),\n      processors,\n    };\n  };\n}\n","import Logger from 'nightingale-logger';\nimport Level from 'nightingale-levels';\n\nexport default Logger;\nexport { configure, addConfig } from './config';\nexport { Level, Level as levels };\n\n/**\n * listen to uncaughtException and unhandledRejection\n * @param {Logger} [logger]\n */\nexport function listenUnhandledErrors(\n  logger: Logger = new Logger('nightingale.listenUnhandledErrors', 'listenUnhandledErrors'),\n) {\n  process.on('uncaughtException', err => logger.error('uncaughtException', { err }));\n  process.on('unhandledRejection', err => logger.error('unhandledRejection', { err }));\n}\n"],"names":["global","__NIGHTINGALE_CONFIG","__NIGHTINGALE_LOGGER_MAP_CACHE","Map","__NIGHTINGALE_CONFIG_DEFAULT","clearCache","clear","handleConfig","config","keys","pattern","Error","key","handler","handlers","processor","processors","configure","length","log","map","addConfig","unshift","configIsForKey","includes","test","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","globalCache","has","get","loggerConfig","filter","some","push","stop","set","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","level","minLevel","isHandling","listenUnhandledErrors","logger","Logger","on","err","error"],"mappings":"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"}