{"version":3,"file":"index-browser.cjs.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport { POB_TARGET } from 'pob-babel';\nimport * as util from 'util';\nimport { Level } from 'nightingale-levels';\nimport type {\n  Metadata,\n  MetadataStyles,\n  Styles,\n  Handler,\n  Processor,\n  LogRecord,\n} from 'nightingale-types';\n\nexport { Level } from 'nightingale-levels';\n\nexport interface Options<T extends Metadata> {\n  symbol?: string;\n  metadataStyles?: MetadataStyles<T>;\n  styles?: Styles;\n}\n\nexport interface ComputedConfigForKey {\n  handlers: Handler[];\n  processors: Processor[];\n}\n\ninterface ExtendedFunctionNameMetadata {\n  functionName: string;\n}\n\nexport interface Config {\n  handler?: Handler;\n  handlers?: Handler[];\n  key?: string;\n  keys?: string[];\n  pattern?: RegExp;\n  processor?: Processor;\n  processors?: Processor[];\n  stop?: boolean;\n}\n\ndeclare global {\n  // eslint-disable-next-line vars-on-top, no-var\n  var __NIGHTINGALE_CONFIG: Config[];\n  // eslint-disable-next-line vars-on-top, no-var\n  var __NIGHTINGALE_LOGGER_MAP_CACHE: Map<string, ComputedConfigForKey>;\n  // eslint-disable-next-line vars-on-top, no-var\n  var __NIGHTINGALE_CONFIG_DEFAULT: ComputedConfigForKey;\n  // eslint-disable-next-line vars-on-top, no-var\n  var __NIGHTINGALE_GLOBAL_HANDLERS: unknown;\n  // eslint-disable-next-line vars-on-top, no-var\n  var __NIGHTINGALE_GET_CONFIG_FOR_LOGGER: (\n    key: string,\n  ) => ComputedConfigForKey;\n  // eslint-disable-next-line vars-on-top, no-var\n  var __NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD: (\n    key: string,\n    level: number,\n  ) => ComputedConfigForKey;\n}\n\nconst globalOrWindow: typeof global =\n  typeof global !== 'undefined' ? global : (window as typeof global);\n\nif (!globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n  globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER =\n    (): ComputedConfigForKey => ({\n      handlers: [],\n      processors: [],\n    });\n}\n\nif (!globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD) {\n  globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = (\n    key: string,\n    level: number,\n  ): ComputedConfigForKey => {\n    const { handlers, processors }: ComputedConfigForKey =\n      globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n    return {\n      handlers: handlers.filter(\n        (handler) =>\n          level >= handler.minLevel &&\n          (!handler.isHandling || handler.isHandling(level, key)),\n      ),\n      processors,\n    };\n  };\n}\n\n/** @private */\nfunction getConfigForLoggerRecord(\n  key: string,\n  recordLevel: Level,\n): ComputedConfigForKey {\n  return globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD(\n    key,\n    recordLevel,\n  );\n}\n\nfunction isError(messageOrError: Error | string): messageOrError is Error {\n  return messageOrError instanceof Error;\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport class Logger {\n  private contextObject?: Record<string, unknown>;\n\n  readonly key: string;\n\n  readonly displayName?: string;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  constructor(key: string, displayName?: string) {\n    this.key = key;\n    this.displayName = displayName;\n\n    if (__DEV__ && key.includes('.')) {\n      throw new Error(\n        `nightingale: \\`.\\` in key is no longer supported, use \\`:\\` instead (key: ${key})`,\n      );\n    }\n  }\n\n  /** @private */\n  protected getHandlersAndProcessors(\n    recordLevel: number,\n  ): ComputedConfigForKey {\n    return getConfigForLoggerRecord(this.key, recordLevel);\n  }\n\n  /** @private */\n  getConfig(): Readonly<ComputedConfigForKey> {\n    return globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(this.key);\n  }\n\n  /**\n   * Create a child logger\n   */\n  child(childSuffixKey: string, childDisplayName?: string): Logger {\n    return new Logger(`${this.key}:${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * ```typescript\n   * const loggerMyService = new Logger('app:myService');\n   * function someAction(arg1) {\n   *     const logger = loggerMyService.context({ arg1 });\n   *     logger.enter(someAction);\n   *     // do stuff\n   *     logger.info('info');\n   *     // do stuff\n   *     logger.exit(someAction);\n   * }\n   * ```\n   *\n   */\n  context(context: Record<string, unknown>): Logger {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Get the context of this logger\n   */\n  getContextObject(): Readonly<Record<string, unknown>> | undefined {\n    return this.contextObject;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  setContext(context: Record<string, unknown>): void {\n    this.contextObject = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   */\n  extendsContext(extendedContext: Record<string, unknown>): void {\n    if (this.contextObject === undefined) {\n      throw new Error(\n        'Cannot extends context that does not exists. Use setContext(context) first.',\n      );\n    }\n    Object.assign(this.contextObject, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   */\n  addRecord<T extends Metadata>(record: Readonly<LogRecord<T>>): void {\n    const { handlers, processors } = this.getHandlersAndProcessors(\n      record.level,\n    );\n\n    if (handlers.length === 0) {\n      if (record.level > Level.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach((process) => {\n        process(record, record.context);\n      });\n    }\n\n    handlers.some((handler) => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   */\n  log<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    level: Level = Level.INFO,\n    options?: Options<T>,\n  ): void {\n    const isMessageError = isError(messageOrError);\n\n    const message = isMessageError\n      ? `${messageOrError.name}: ${messageOrError.message}`\n      : messageOrError;\n\n    const extendedMetadata =\n      isMessageError &&\n      !(metadata && Object.prototype.hasOwnProperty.call(metadata, 'error'))\n        ? { ...metadata, error: messageOrError }\n        : metadata;\n\n    const context = extendedMetadata?.context;\n    if (extendedMetadata) {\n      delete extendedMetadata.context;\n    }\n\n    const record: LogRecord<NonNullable<typeof extendedMetadata>> = {\n      level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message,\n      context: context || this.contextObject,\n      metadata: extendedMetadata as NonNullable<typeof extendedMetadata>,\n      extra: {},\n      ...options,\n    };\n    this.addRecord(record);\n  }\n\n  /**\n   * Log a trace message\n   */\n  trace<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log a debug message\n   */\n  debug<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Notice an info message\n   */\n  notice<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.NOTICE, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   */\n  info<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   */\n  warn<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   *\n   * @example\n   * ```typescript\n   * const logger = new Logger('something');\n   * try {\n   *   throw new Error('Always throws here');\n   * } catch (error) {\n   *   logger.error('caught error', { error });\n   * }\n   * ```\n   */\n  error<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.ERROR, { metadataStyles });\n  }\n\n  /**\n   * Log an critical message\n   */\n  critical<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.CRITICAL, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   *\n   * @example\n   * ```typescript\n   * const logger = new Logger('something');\n   * try {\n   *   throw new Error('Always throws here');\n   * } catch (error) {\n   *   logger.error('caught error', { error });\n   *   process.exit(1);\n   * }\n   */\n  fatal<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   */\n  alert<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   */\n  inspectValue<T extends Metadata>(\n    value: unknown,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    if (POB_TARGET === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      // Note: inspect is a special function for node:\n      // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n      const inspectedValue = util.inspect(value, { depth: 6 });\n      this.log(inspectedValue, metadata, Level.DEBUG, {\n        metadataStyles,\n        styles: ['gray'],\n      });\n    }\n  }\n\n  /**\n   * Log a debugged var\n   */\n  inspectVar<T extends Metadata>(\n    varName: string,\n    varValue: unknown,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    if (POB_TARGET === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      const inspectedValue = util.inspect(varValue, { depth: 6 });\n      this.log(`${varName} = ${inspectedValue}`, metadata, Level.DEBUG, {\n        metadataStyles,\n        styles: ['cyan'],\n      });\n    }\n  }\n\n  /**\n   * Alias for infoSuccess\n   */\n  success<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   */\n  infoSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   */\n  debugSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   */\n  fail<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.infoFail(messageOrError, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   */\n  infoFail<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   */\n  debugFail<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @returns {number} time to pass to timeEnd\n   */\n  time<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n  ): number {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  infoTime<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): number {\n    return this.time(message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   */\n  timeEnd<T extends Metadata>(\n    startTime: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n    options?: Options<T>,\n  ): void {\n    const now = Date.now();\n\n    const diffTime = now - startTime;\n    let readableTime;\n\n    if (diffTime < 1000) {\n      readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 ? Math.floor(diffTime / 1000) : 0;\n      const ms = diffTime - seconds * 1000;\n      readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    const extendedMetadata = {\n      ...metadata,\n      readableTime,\n      timeMs: diffTime,\n    };\n\n    this.log(message, extendedMetadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoSuccessTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * ```typescript\n   * class A {\n   *   method(arg1) {\n   *     logger.enter(method, { arg1 });\n   *     // Do your stuff\n   *   }\n   * }\n   * ```\n   *\n   */\n  enter<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T & ExtendedFunctionNameMetadata>,\n  ): void {\n    const extendedMetadata = {\n      ...metadata,\n      functionName: fn.name,\n    };\n    this.log('enter', extendedMetadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * ```typescript\n   * const logger = new Logger('myNamespace:A');\n   * class A {\n   *   method(arg1) {\n   *     // Do your stuff\n   *     logger.exit(method, { arg1 });\n   *   }\n   * }\n   * ```\n   */\n  exit<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T & ExtendedFunctionNameMetadata>,\n  ): void {\n    const extendedMetadata = {\n      ...metadata,\n      functionName: fn.name,\n    };\n    this.log('exit', extendedMetadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * ```typescript\n   * const logger = new Logger('myNamespace:A');\n   * class A {\n   *   method() {\n   *     logger.wrap(method, () => {\n   *       // Do your stuff\n   *     });\n   *   }\n   * }\n   * ```\n   */\n  wrap<Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    callback: () => void,\n  ): void;\n\n  wrap<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    metadata: T,\n    callback: () => void,\n  ): void;\n\n  wrap<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    metadata: T,\n    metadataStyles: MetadataStyles<T>,\n    callback: () => void,\n  ): void;\n\n  wrap<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    option1: T | (() => void),\n    option2?: MetadataStyles<T> | (() => void),\n    callback?: () => void,\n  ): void {\n    let metadata: T | undefined;\n    let metadataStyles: MetadataStyles<T> | undefined;\n\n    if (typeof option1 === 'function') {\n      callback = option1;\n    } else {\n      metadata = option1;\n\n      if (typeof option2 === 'function') {\n        callback = option2;\n      } else {\n        metadataStyles = option2;\n      }\n    }\n\n    this.enter(fn, metadata, metadataStyles);\n    (callback as () => void)();\n    this.exit(fn);\n  }\n}\n"],"names":["globalOrWindow","global","window","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","handlers","processors","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","key","level","filter","handler","minLevel","isHandling","getConfigForLoggerRecord","recordLevel","isError","messageOrError","Error","Logger","displayName","includes","getHandlersAndProcessors","getConfig","child","childSuffixKey","childDisplayName","context","logger","setContext","getContextObject","contextObject","extendsContext","extendedContext","undefined","Object","assign","addRecord","record","length","Level","ERROR","console","log","message","forEach","process","some","handle","metadata","options","INFO","isMessageError","name","extendedMetadata","prototype","hasOwnProperty","call","_extends","error","datetime","Date","extra","trace","metadataStyles","TRACE","debug","DEBUG","notice","NOTICE","info","warn","WARN","critical","CRITICAL","fatal","FATAL","alert","ALERT","inspectValue","inspectVar","success","infoSuccess","symbol","styles","debugSuccess","fail","infoFail","debugFail","time","now","infoTime","timeEnd","startTime","diffTime","readableTime","seconds","Math","floor","timeMs","infoTimeEnd","infoSuccessTimeEnd","enter","fn","functionName","exit","wrap","option1","option2","callback"],"mappings":"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"}