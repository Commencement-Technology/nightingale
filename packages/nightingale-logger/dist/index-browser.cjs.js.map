{"version":3,"file":"index-browser.cjs.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport 'pob-babel';\nimport * as util from 'util';\nimport Level from 'nightingale-levels';\nimport { Metadata, MetadataStyles, Styles, Handler, Processor, Record } from 'nightingale-types';\n\ndeclare const global: any;\n\nexport { Level };\n\nexport interface Options<T> {\n  symbol?: string;\n  metadataStyles?: MetadataStyles<T>;\n  styles?: Styles;\n}\n\nexport interface ComputedConfigForKey {\n  handlers: Handler[];\n  processors: Processor[];\n}\n\ninterface ExtendedErrorMetadata {\n  error: Error;\n}\n\ninterface ExtendedTimeMetadata {\n  readableTime: string;\n  timeMs: number;\n}\n\ninterface ExtendedFunctionNameMetadata {\n  functionName: string;\n}\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = (): ComputedConfigForKey => ({\n    handlers: [],\n    processors: [],\n  });\n}\n\nif (global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = (\n    key: string,\n    level: number,\n  ): ComputedConfigForKey => {\n    const {\n      handlers,\n      processors,\n    }: ComputedConfigForKey = global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n    return {\n      handlers: handlers.filter(\n        handler =>\n          level >= handler.minLevel && (!handler.isHandling || handler.isHandling(level, key)),\n      ),\n      processors,\n    };\n  };\n}\n\n/** @private */\nfunction getConfigForLoggerRecord(key: string, recordLevel: number): ComputedConfigForKey {\n  return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD(key, recordLevel);\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n  private contextObject?: Object;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  constructor(readonly key: string, readonly displayName?: string) {\n    this.key = key;\n    this.displayName = displayName;\n\n    if (POB_ENV !== 'production' && key.includes('.')) {\n      throw new Error(`nightingale: \\`.\\` in key is no longer supported (key: ${key})`);\n    }\n  }\n\n  /** @private */\n  getHandlersAndProcessors(recordLevel: number): ComputedConfigForKey {\n    return getConfigForLoggerRecord(this.key, recordLevel);\n  }\n\n  /** @private */\n  getConfig(): ComputedConfigForKey {\n    return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(this.key, Level.ALL);\n  }\n\n  /**\n   * Create a child logger\n   */\n  child(childSuffixKey: string, childDisplayName?: string): Logger {\n    return new Logger(`${this.key}:${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * const loggerMyService = new Logger('app.myService');\n   * function someAction(arg1) {\n   *     const logger = loggerMyService.context({ arg1 });\n   *     logger.info('starting');\n   *     // do stuff\n   *     logger.info('done');\n   * }\n   *\n   */\n  context(context: object): Logger {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  setContext(context: object) {\n    this.contextObject = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   */\n  extendsContext(extendedContext: Object) {\n    Object.assign(this.contextObject, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   */\n  addRecord<T extends Metadata>(record: Readonly<Record<T>>) {\n    const { handlers, processors } = this.getHandlersAndProcessors(record.level);\n\n    if (handlers.length === 0) {\n      if (record.level > Level.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach(process => process(record, record.context));\n    }\n\n    handlers.some(handler => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   */\n  log<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    level: number = Level.INFO,\n    options?: Options<T>,\n  ) {\n    const context = metadata && metadata.context;\n    if (metadata) {\n      delete metadata.context;\n    }\n\n    const record: Record<T> = {\n      level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message,\n      context: context || this.contextObject,\n      metadata,\n      extra: {},\n      ...options,\n    };\n    this.addRecord(record);\n  }\n\n  /**\n   * Log a trace message\n   */\n  trace<T extends Metadata>(message: string, metadata?: T, metadataStyles?: MetadataStyles<T>) {\n    this.log(message, metadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log a debug message\n   */\n  debug<T extends Metadata>(message: string, metadata?: T, metadataStyles?: MetadataStyles<T>) {\n    this.log(message, metadata, Level.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Notice an info message\n   */\n  notice<T extends Metadata>(message: string, metadata?: T, metadataStyles?: MetadataStyles<T>) {\n    this.log(message, metadata, Level.NOTICE, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   */\n  info<T extends Metadata>(message: string, metadata?: T, metadataStyles?: MetadataStyles<T>) {\n    this.log(message, metadata, Level.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   */\n  warn<T extends Metadata>(message: string, metadata?: T, metadataStyles?: MetadataStyles<T>) {\n    this.log(message, metadata, Level.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   */\n  error<T extends Metadata>(\n    message: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    if (message instanceof Error) {\n      const extendedMetadata: T & ExtendedErrorMetadata = Object.assign({}, metadata, {\n        error: message,\n      });\n      message = `${extendedMetadata.error.name}: ${extendedMetadata.error.message}`;\n      this.log(message, extendedMetadata, Level.ERROR, { metadataStyles });\n    } else {\n      this.log(message, metadata, Level.ERROR, { metadataStyles });\n    }\n  }\n\n  /**\n   * Log an critical message\n   */\n  critical<T extends Metadata>(message: string, metadata?: T, metadataStyles?: MetadataStyles<T>) {\n    this.log(message, metadata, Level.CRITICAL, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   */\n  fatal<T extends Metadata>(message: string, metadata?: T, metadataStyles?: MetadataStyles<T>) {\n    this.log(message, metadata, Level.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   */\n  alert<T extends Metadata>(message: string, metadata?: T, metadataStyles?: MetadataStyles<T>) {\n    this.log(message, metadata, Level.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   */\n  inspectValue<T extends Metadata>(value: any, metadata?: T, metadataStyles?: MetadataStyles<T>) {\n    if (POB_TARGET === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      // Note: inspect is a special function for node:\n      // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n      value = util.inspect(value, { depth: 6 });\n      this.log(value, metadata, Level.DEBUG, { metadataStyles, styles: ['gray'] });\n    }\n  }\n\n  /**\n   * Log a debugged var\n   */\n  inspectVar<T extends Metadata>(\n    varName: string,\n    varValue: any,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    if (POB_TARGET === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      varValue = util.inspect(varValue, { depth: 6 });\n      this.log(`${varName} = ${varValue}`, metadata, Level.DEBUG, {\n        metadataStyles,\n        styles: ['cyan'],\n      });\n    }\n  }\n\n  /**\n   * Alias for infoSuccess\n   */\n  success<T extends Metadata>(message: string, metadata?: T, metadataStyles?: MetadataStyles<T>) {\n    this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   */\n  infoSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   */\n  debugSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   */\n  fail<T extends Metadata>(message: string, metadata?: T, metadataStyles?: MetadataStyles<T>) {\n    this.infoFail(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   */\n  infoFail<T extends Metadata>(message: string, metadata?: T, metadataStyles?: MetadataStyles<T>) {\n    this.log(message, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   */\n  debugFail<T extends Metadata>(message: string, metadata?: T, metadataStyles?: MetadataStyles<T>) {\n    this.log(message, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @returns {number} time to pass to timeEnd\n   */\n  time<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n  ): number {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  infoTime<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): number {\n    return this.time(message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   */\n  timeEnd<T extends Metadata>(\n    startTime: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n    options?: Options<T>,\n  ) {\n    const now = Date.now();\n\n    const diffTime = now - startTime;\n    let readableTime;\n\n    if (diffTime < 1000) {\n      readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 ? Math.floor(diffTime / 1000) : 0;\n      const ms = diffTime - seconds * 1000;\n      readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    const extendedMetadata: T & ExtendedTimeMetadata = Object.assign({}, metadata, {\n      readableTime,\n      timeMs: diffTime,\n    });\n\n    this.log(message, extendedMetadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoSuccessTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * class A {\n   *   method(arg1) {\n   *     logger.enter(method, { arg1 });\n   *     // Do your stuff\n   *   }\n   * }\n   *\n   */\n  enter<T extends Metadata>(fn: Function, metadata?: T, metadataStyles?: MetadataStyles<T>) {\n    const extendedMetadata: Metadata = metadata || {};\n    extendedMetadata.functionName = fn.name;\n    this.log('enter', metadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n   *   method(arg1) {\n   *     // Do your stuff\n   *     logger.exit(method, { arg1 });\n   *   }\n   * }\n   */\n  exit<T extends Metadata>(\n    fn: Function,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T & { functionName: string }>,\n  ) {\n    const extendedMetadata: T & ExtendedFunctionNameMetadata = Object.assign({}, metadata, {\n      functionName: fn.name,\n    });\n    this.log('exit', extendedMetadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n   *   method() {\n   *     logger.wrap(method, () => {\n   *       // Do your stuff\n   *     });\n   *   }\n   * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {Function} callback\n   */\n  wrap<T extends Metadata>(\n    fn: Function,\n    metadata?: T | Function,\n    metadataStyles?: MetadataStyles<T> | Function,\n    callback?: Function,\n  ) {\n    if (typeof metadata === 'function') {\n      callback = metadata;\n      metadata = undefined;\n    } else if (typeof metadataStyles === 'function') {\n      callback = metadataStyles;\n      metadataStyles = undefined;\n    }\n\n    this.enter(fn, metadata, metadataStyles as MetadataStyles<T>);\n    (callback as Function)();\n    this.exit(fn);\n  }\n}\n"],"names":["global","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","key","level","handlers","processors","filter","handler","minLevel","isHandling","getConfigForLoggerRecord","recordLevel","Logger","displayName","contextObject","getHandlersAndProcessors","getConfig","Level","ALL","child","childSuffixKey","childDisplayName","context","logger","setContext","extendsContext","extendedContext","assign","addRecord","record","length","ERROR","log","message","forEach","process","some","handle","metadata","options","INFO","Date","trace","metadataStyles","TRACE","debug","DEBUG","notice","NOTICE","info","warn","WARN","error","Error","extendedMetadata","Object","name","critical","CRITICAL","fatal","FATAL","alert","ALERT","inspectValue","inspectVar","success","infoSuccess","debugSuccess","fail","infoFail","debugFail","time","now","infoTime","timeEnd","startTime","diffTime","readableTime","seconds","Math","floor","infoTimeEnd","infoSuccessTimeEnd","enter","fn","functionName","exit","wrap","callback","undefined"],"mappings":"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"}