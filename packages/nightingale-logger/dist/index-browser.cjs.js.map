{"version":3,"file":"index-browser.cjs.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport { POB_TARGET } from 'pob-babel';\nimport * as util from 'util';\nimport { Level } from 'nightingale-levels';\nimport type {\n  Metadata,\n  MetadataStyles,\n  Styles,\n  Handler,\n  Processor,\n  LogRecord,\n} from 'nightingale-types';\n\nexport { Level } from 'nightingale-levels';\n\nexport interface Options<T extends Metadata> {\n  symbol?: string;\n  metadataStyles?: MetadataStyles<T>;\n  styles?: Styles;\n}\n\nexport interface ComputedConfigForKey {\n  handlers: Handler[];\n  processors: Processor[];\n}\n\ninterface ExtendedFunctionNameMetadata {\n  functionName: string;\n}\n\nexport interface Config {\n  handler?: Handler;\n  handlers?: Handler[];\n  key?: string;\n  keys?: string[];\n  pattern?: RegExp;\n  processor?: Processor;\n  processors?: Processor[];\n  stop?: boolean;\n}\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace NodeJS {\n    interface Global {\n      __NIGHTINGALE_CONFIG: Config[];\n      __NIGHTINGALE_LOGGER_MAP_CACHE: Map<string, ComputedConfigForKey>;\n      __NIGHTINGALE_CONFIG_DEFAULT: ComputedConfigForKey;\n      __NIGHTINGALE_GLOBAL_HANDLERS: unknown;\n      __NIGHTINGALE_GET_CONFIG_FOR_LOGGER: (\n        key: string,\n      ) => ComputedConfigForKey;\n      __NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD: (\n        key: string,\n        level: number,\n      ) => ComputedConfigForKey;\n    }\n  }\n}\n\nconst globalOrWindow: typeof global =\n  typeof global !== 'undefined' ? global : (window as typeof global);\n\nif (!globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n  globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER =\n    (): ComputedConfigForKey => ({\n      handlers: [],\n      processors: [],\n    });\n}\n\nif (!globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD) {\n  globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = (\n    key: string,\n    level: number,\n  ): ComputedConfigForKey => {\n    const { handlers, processors }: ComputedConfigForKey =\n      globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n    return {\n      handlers: handlers.filter(\n        (handler) =>\n          level >= handler.minLevel &&\n          (!handler.isHandling || handler.isHandling(level, key)),\n      ),\n      processors,\n    };\n  };\n}\n\n/** @private */\nfunction getConfigForLoggerRecord(\n  key: string,\n  recordLevel: Level,\n): ComputedConfigForKey {\n  return globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD(\n    key,\n    recordLevel,\n  );\n}\n\nfunction isError(messageOrError: Error | string): messageOrError is Error {\n  return messageOrError instanceof Error;\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport class Logger {\n  private contextObject?: Record<string, unknown>;\n\n  readonly key: string;\n\n  readonly displayName?: string;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  constructor(key: string, displayName?: string) {\n    this.key = key;\n    this.displayName = displayName;\n\n    if (__DEV__ && key.includes('.')) {\n      throw new Error(\n        `nightingale: \\`.\\` in key is no longer supported, use \\`:\\` instead (key: ${key})`,\n      );\n    }\n  }\n\n  /** @private */\n  protected getHandlersAndProcessors(\n    recordLevel: number,\n  ): ComputedConfigForKey {\n    return getConfigForLoggerRecord(this.key, recordLevel);\n  }\n\n  /** @private */\n  getConfig(): Readonly<ComputedConfigForKey> {\n    return globalOrWindow.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(this.key);\n  }\n\n  /**\n   * Create a child logger\n   */\n  child(childSuffixKey: string, childDisplayName?: string): Logger {\n    return new Logger(`${this.key}:${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * ```typescript\n   * const loggerMyService = new Logger('app:myService');\n   * function someAction(arg1) {\n   *     const logger = loggerMyService.context({ arg1 });\n   *     logger.enter(someAction);\n   *     // do stuff\n   *     logger.info('info');\n   *     // do stuff\n   *     logger.exit(someAction);\n   * }\n   * ```\n   *\n   */\n  context(context: Record<string, unknown>): Logger {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Get the context of this logger\n   */\n  getContextObject(): Readonly<Record<string, unknown>> | undefined {\n    return this.contextObject;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  setContext(context: Record<string, unknown>): void {\n    this.contextObject = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   */\n  extendsContext(extendedContext: Record<string, unknown>): void {\n    if (this.contextObject === undefined) {\n      throw new Error(\n        'Cannot extends context that does not exists. Use setContext(context) first.',\n      );\n    }\n    Object.assign(this.contextObject, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   */\n  addRecord<T extends Metadata>(record: Readonly<LogRecord<T>>): void {\n    const { handlers, processors } = this.getHandlersAndProcessors(\n      record.level,\n    );\n\n    if (handlers.length === 0) {\n      if (record.level > Level.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach((process) => {\n        process(record, record.context);\n      });\n    }\n\n    handlers.some((handler) => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   */\n  log<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    level: Level = Level.INFO,\n    options?: Options<T>,\n  ): void {\n    const isMessageError = isError(messageOrError);\n\n    const message = isMessageError\n      ? `${messageOrError.name}: ${messageOrError.message}`\n      : messageOrError;\n\n    const extendedMetadata =\n      isMessageError &&\n      !(metadata && Object.prototype.hasOwnProperty.call(metadata, 'error'))\n        ? { ...metadata, error: messageOrError }\n        : metadata;\n\n    const context = extendedMetadata?.context;\n    if (extendedMetadata) {\n      delete extendedMetadata.context;\n    }\n\n    const record: LogRecord<NonNullable<typeof extendedMetadata>> = {\n      level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message,\n      context: context || this.contextObject,\n      metadata: extendedMetadata as NonNullable<typeof extendedMetadata>,\n      extra: {},\n      ...options,\n    };\n    this.addRecord(record);\n  }\n\n  /**\n   * Log a trace message\n   */\n  trace<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log a debug message\n   */\n  debug<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Notice an info message\n   */\n  notice<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.NOTICE, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   */\n  info<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   */\n  warn<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   *\n   * @example\n   * ```typescript\n   * const logger = new Logger('something');\n   * try {\n   *   throw new Error('Always throws here');\n   * } catch (error) {\n   *   logger.error('caught error', { error });\n   * }\n   * ```\n   */\n  error<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.ERROR, { metadataStyles });\n  }\n\n  /**\n   * Log an critical message\n   */\n  critical<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.CRITICAL, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   *\n   * @example\n   * ```typescript\n   * const logger = new Logger('something');\n   * try {\n   *   throw new Error('Always throws here');\n   * } catch (error) {\n   *   logger.error('caught error', { error });\n   *   process.exit(1);\n   * }\n   */\n  fatal<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   */\n  alert<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   */\n  inspectValue<T extends Metadata>(\n    value: unknown,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    if (POB_TARGET === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      // Note: inspect is a special function for node:\n      // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n      const inspectedValue = util.inspect(value, { depth: 6 });\n      this.log(inspectedValue, metadata, Level.DEBUG, {\n        metadataStyles,\n        styles: ['gray'],\n      });\n    }\n  }\n\n  /**\n   * Log a debugged var\n   */\n  inspectVar<T extends Metadata>(\n    varName: string,\n    varValue: unknown,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    if (POB_TARGET === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      const inspectedValue = util.inspect(varValue, { depth: 6 });\n      this.log(`${varName} = ${inspectedValue}`, metadata, Level.DEBUG, {\n        metadataStyles,\n        styles: ['cyan'],\n      });\n    }\n  }\n\n  /**\n   * Alias for infoSuccess\n   */\n  success<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   */\n  infoSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   */\n  debugSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(message, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   */\n  fail<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.infoFail(messageOrError, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   */\n  infoFail<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   */\n  debugFail<T extends Metadata>(\n    messageOrError: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.log(messageOrError, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @returns {number} time to pass to timeEnd\n   */\n  time<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n  ): number {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  infoTime<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): number {\n    return this.time(message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   */\n  timeEnd<T extends Metadata>(\n    startTime: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n    options?: Options<T>,\n  ): void {\n    const now = Date.now();\n\n    const diffTime = now - startTime;\n    let readableTime;\n\n    if (diffTime < 1000) {\n      readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 ? Math.floor(diffTime / 1000) : 0;\n      const ms = diffTime - seconds * 1000;\n      readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    const extendedMetadata = {\n      ...metadata,\n      readableTime,\n      timeMs: diffTime,\n    };\n\n    this.log(message, extendedMetadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoSuccessTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): void {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * ```typescript\n   * class A {\n   *   method(arg1) {\n   *     logger.enter(method, { arg1 });\n   *     // Do your stuff\n   *   }\n   * }\n   * ```\n   *\n   */\n  enter<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T & ExtendedFunctionNameMetadata>,\n  ): void {\n    const extendedMetadata = {\n      ...metadata,\n      functionName: fn.name,\n    };\n    this.log('enter', extendedMetadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * ```typescript\n   * const logger = new Logger('myNamespace:A');\n   * class A {\n   *   method(arg1) {\n   *     // Do your stuff\n   *     logger.exit(method, { arg1 });\n   *   }\n   * }\n   * ```\n   */\n  exit<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T & ExtendedFunctionNameMetadata>,\n  ): void {\n    const extendedMetadata = {\n      ...metadata,\n      functionName: fn.name,\n    };\n    this.log('exit', extendedMetadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * ```typescript\n   * const logger = new Logger('myNamespace:A');\n   * class A {\n   *   method() {\n   *     logger.wrap(method, () => {\n   *       // Do your stuff\n   *     });\n   *   }\n   * }\n   * ```\n   */\n  wrap<Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    callback: () => void,\n  ): void;\n\n  wrap<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    metadata: T,\n    callback: () => void,\n  ): void;\n\n  wrap<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    metadata: T,\n    metadataStyles: MetadataStyles<T>,\n    callback: () => void,\n  ): void;\n\n  wrap<T extends Metadata, Fn extends (...args: unknown[]) => unknown>(\n    fn: Fn,\n    option1: T | (() => void),\n    option2?: MetadataStyles<T> | (() => void),\n    callback?: () => void,\n  ): void {\n    let metadata: T | undefined;\n    let metadataStyles: MetadataStyles<T> | undefined;\n\n    if (typeof option1 === 'function') {\n      callback = option1;\n    } else {\n      metadata = option1;\n\n      if (typeof option2 === 'function') {\n        callback = option2;\n      } else {\n        metadataStyles = option2;\n      }\n    }\n\n    this.enter(fn, metadata, metadataStyles);\n    (callback as () => void)();\n    this.exit(fn);\n  }\n}\n"],"names":["globalOrWindow","global","window","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","handlers","processors","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","key","level","filter","handler","minLevel","isHandling","getConfigForLoggerRecord","recordLevel","isError","messageOrError","Error","Logger","displayName","includes","getHandlersAndProcessors","getConfig","child","childSuffixKey","childDisplayName","context","logger","setContext","getContextObject","contextObject","extendsContext","extendedContext","undefined","Object","assign","addRecord","record","length","Level","ERROR","console","log","message","forEach","process","some","handle","metadata","options","INFO","isMessageError","name","extendedMetadata","prototype","hasOwnProperty","call","_extends","error","datetime","Date","extra","trace","metadataStyles","TRACE","debug","DEBUG","notice","NOTICE","info","warn","WARN","critical","CRITICAL","fatal","FATAL","alert","ALERT","inspectValue","inspectVar","success","infoSuccess","symbol","styles","debugSuccess","fail","infoFail","debugFail","time","now","infoTime","timeEnd","startTime","diffTime","readableTime","seconds","Math","floor","timeMs","infoTimeEnd","infoSuccessTimeEnd","enter","fn","functionName","exit","wrap","option1","option2","callback"],"mappings":"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"}