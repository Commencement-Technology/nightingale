{"version":3,"file":"index-browser.es.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport { PRODUCTION, POB_TARGET } from 'pob-babel';\nimport * as util from 'util';\nimport Level from 'nightingale-levels';\nimport {\n  Metadata,\n  MetadataStyles,\n  Styles,\n  Handler,\n  Processor,\n  Record,\n} from 'nightingale-types';\n\ndeclare const global: any;\n\nexport { Level };\n\nexport interface Options<T> {\n  symbol?: string;\n  metadataStyles?: MetadataStyles<T>;\n  styles?: Styles;\n}\n\nexport interface ComputedConfigForKey {\n  handlers: Handler[];\n  processors: Processor[];\n}\n\ninterface ExtendedErrorMetadata {\n  error: Error;\n}\n\ninterface ExtendedTimeMetadata {\n  readableTime: string;\n  timeMs: number;\n}\n\ninterface ExtendedFunctionNameMetadata {\n  functionName: string;\n}\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = (): ComputedConfigForKey => ({\n    handlers: [],\n    processors: [],\n  });\n}\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = (\n    key: string,\n    level: number,\n  ): ComputedConfigForKey => {\n    const {\n      handlers,\n      processors,\n    }: ComputedConfigForKey = global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n    return {\n      handlers: handlers.filter(\n        (handler) =>\n          level >= handler.minLevel &&\n          (!handler.isHandling || handler.isHandling(level, key)),\n      ),\n      processors,\n    };\n  };\n}\n\n/** @private */\nfunction getConfigForLoggerRecord(\n  key: string,\n  recordLevel: Level,\n): ComputedConfigForKey {\n  return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD(key, recordLevel);\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n  private contextObject?: object;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  constructor(readonly key: string, readonly displayName?: string) {\n    this.key = key;\n    this.displayName = displayName;\n\n    if (!PRODUCTION && key.includes('.')) {\n      throw new Error(\n        `nightingale: \\`.\\` in key is no longer supported (key: ${key})`,\n      );\n    }\n  }\n\n  /** @private */\n  getHandlersAndProcessors(recordLevel: number): ComputedConfigForKey {\n    return getConfigForLoggerRecord(this.key, recordLevel);\n  }\n\n  /** @private */\n  getConfig(): ComputedConfigForKey {\n    return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(this.key, Level.ALL);\n  }\n\n  /**\n   * Create a child logger\n   */\n  child(childSuffixKey: string, childDisplayName?: string): Logger {\n    return new Logger(`${this.key}:${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * const loggerMyService = new Logger('app.myService');\n   * function someAction(arg1) {\n   *     const logger = loggerMyService.context({ arg1 });\n   *     logger.info('starting');\n   *     // do stuff\n   *     logger.info('done');\n   * }\n   *\n   */\n  context(context: object): Logger {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Get the context of this logger\n   */\n  getContextObject(): Readonly<object> | undefined {\n    return this.contextObject;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  setContext(context: object) {\n    this.contextObject = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   */\n  extendsContext(extendedContext: Object) {\n    Object.assign(this.contextObject, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   */\n  addRecord<T extends Metadata>(record: Readonly<Record<T>>) {\n    const { handlers, processors } = this.getHandlersAndProcessors(\n      record.level,\n    );\n\n    if (handlers.length === 0) {\n      if (record.level > Level.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach((process) => process(record, record.context));\n    }\n\n    handlers.some((handler) => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   */\n  log<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    level: number = Level.INFO,\n    options?: Options<T>,\n  ) {\n    const context = metadata && metadata.context;\n    if (metadata) {\n      delete metadata.context;\n    }\n\n    const record: Record<T> = {\n      level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message,\n      context: context || this.contextObject,\n      metadata,\n      extra: {},\n      ...options,\n    };\n    this.addRecord(record);\n  }\n\n  /**\n   * Log a trace message\n   */\n  trace<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log a debug message\n   */\n  debug<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Notice an info message\n   */\n  notice<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.NOTICE, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   */\n  info<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   */\n  warn<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   */\n  error<T extends Metadata>(\n    message: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    if (message instanceof Error) {\n      const extendedMetadata: T & ExtendedErrorMetadata = Object.assign(\n        {},\n        metadata,\n        {\n          error: message,\n        },\n      );\n      message = `${extendedMetadata.error.name}: ${\n        extendedMetadata.error.message\n      }`;\n      this.log(message, extendedMetadata, Level.ERROR, { metadataStyles });\n    } else {\n      this.log(message, metadata, Level.ERROR, { metadataStyles });\n    }\n  }\n\n  /**\n   * Log an critical message\n   */\n  critical<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.CRITICAL, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   */\n  fatal<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   */\n  alert<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   */\n  inspectValue<T extends Metadata>(\n    value: any,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    if (POB_TARGET === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      // Note: inspect is a special function for node:\n      // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n      value = util.inspect(value, { depth: 6 });\n      this.log(value, metadata, Level.DEBUG, {\n        metadataStyles,\n        styles: ['gray'],\n      });\n    }\n  }\n\n  /**\n   * Log a debugged var\n   */\n  inspectVar<T extends Metadata>(\n    varName: string,\n    varValue: any,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    if (POB_TARGET === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      varValue = util.inspect(varValue, { depth: 6 });\n      this.log(`${varName} = ${varValue}`, metadata, Level.DEBUG, {\n        metadataStyles,\n        styles: ['cyan'],\n      });\n    }\n  }\n\n  /**\n   * Alias for infoSuccess\n   */\n  success<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   */\n  infoSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   */\n  debugSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   */\n  fail<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.infoFail(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   */\n  infoFail<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   */\n  debugFail<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @returns {number} time to pass to timeEnd\n   */\n  time<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n  ): number {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  infoTime<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): number {\n    return this.time(message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   */\n  timeEnd<T extends Metadata>(\n    startTime: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n    options?: Options<T>,\n  ) {\n    const now = Date.now();\n\n    const diffTime = now - startTime;\n    let readableTime;\n\n    if (diffTime < 1000) {\n      readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 ? Math.floor(diffTime / 1000) : 0;\n      const ms = diffTime - seconds * 1000;\n      readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    const extendedMetadata: T & ExtendedTimeMetadata = Object.assign(\n      {},\n      metadata,\n      {\n        readableTime,\n        timeMs: diffTime,\n      },\n    );\n\n    this.log(message, extendedMetadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoSuccessTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * class A {\n   *   method(arg1) {\n   *     logger.enter(method, { arg1 });\n   *     // Do your stuff\n   *   }\n   * }\n   *\n   */\n  enter<T extends Metadata>(\n    fn: Function,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    const extendedMetadata: Metadata = metadata || {};\n    extendedMetadata.functionName = fn.name;\n    this.log('enter', metadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n   *   method(arg1) {\n   *     // Do your stuff\n   *     logger.exit(method, { arg1 });\n   *   }\n   * }\n   */\n  exit<T extends Metadata>(\n    fn: Function,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T & { functionName: string }>,\n  ) {\n    const extendedMetadata: T & ExtendedFunctionNameMetadata = Object.assign(\n      {},\n      metadata,\n      {\n        functionName: fn.name,\n      },\n    );\n    this.log('exit', extendedMetadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n   *   method() {\n   *     logger.wrap(method, () => {\n   *       // Do your stuff\n   *     });\n   *   }\n   * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {Function} callback\n   */\n  wrap<T extends Metadata>(\n    fn: Function,\n    metadata?: T | Function,\n    metadataStyles?: MetadataStyles<T> | Function,\n    callback?: Function,\n  ) {\n    if (typeof metadata === 'function') {\n      callback = metadata;\n      metadata = undefined;\n    } else if (typeof metadataStyles === 'function') {\n      callback = metadataStyles;\n      metadataStyles = undefined;\n    }\n\n    this.enter(fn, metadata, metadataStyles as MetadataStyles<T>);\n    (callback as Function)();\n    this.exit(fn);\n  }\n}\n"],"names":["global","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","handlers","processors","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","key","level","filter","handler","minLevel","isHandling","getConfigForLoggerRecord","recordLevel","Logger","displayName","contextObject","getHandlersAndProcessors","getConfig","Level","ALL","child","childSuffixKey","childDisplayName","context","logger","setContext","getContextObject","extendsContext","extendedContext","Object","assign","addRecord","record","length","ERROR","console","log","message","forEach","process","some","handle","metadata","options","INFO","datetime","Date","extra","trace","metadataStyles","TRACE","debug","DEBUG","notice","NOTICE","info","warn","WARN","error","Error","extendedMetadata","name","critical","CRITICAL","fatal","FATAL","alert","ALERT","inspectValue","inspectVar","success","infoSuccess","symbol","styles","debugSuccess","fail","infoFail","debugFail","time","now","infoTime","timeEnd","startTime","diffTime","readableTime","seconds","Math","floor","timeMs","infoTimeEnd","infoSuccessTimeEnd","enter","fn","functionName","exit","wrap","callback","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAyCA,IAAI,CAACA,MAAM,CAACC,mCAAZ,EAAiD;EAC/CD,MAAM,CAACC,mCAAP,GAA6C;WAA6B;MACxEC,QAAQ,EAAE,EAD8D;MAExEC,UAAU,EAAE;KAF+B;GAA7C;;;AAMF,IAAI,CAACH,MAAM,CAACI,0CAAZ,EAAwD;EACtDJ,MAAM,CAACI,0CAAP,GAAoD,UAClDC,GADkD,EAElDC,KAFkD,EAGzB;gCAICN,MAAM,CAACC,mCAAP,CAA2CI,GAA3C,CAJD;QAEvBH,QAFuB,yBAEvBA,QAFuB;QAGvBC,UAHuB,yBAGvBA,UAHuB;;WAMlB;MACLD,QAAQ,EAAEA,QAAQ,CAACK,MAAT,CACR,UAACC,OAAD;eACEF,KAAK,IAAIE,OAAO,CAACC,QAAjB,KACC,CAACD,OAAO,CAACE,UAAT,IAAuBF,OAAO,CAACE,UAAR,CAAmBJ,KAAnB,EAA0BD,GAA1B,CADxB,CADF;OADQ,CADL;MAMLF,UAAU,EAAVA;KANF;GATF;;;;;AAqBF,SAASQ,wBAAT,CACEN,GADF,EAEEO,WAFF,EAGwB;SACfZ,MAAM,CAACI,0CAAP,CAAkDC,GAAlD,EAAuDO,WAAvD,CAAP;;;;;;;;IAOmBC;;;;;;;;;kBASER,GAArB,EAA2CS,WAA3C,EAAiE;SARzDC,aAQyD;SAC1DV,GAAL,GAAWA,GAAX;SACKS,WAAL,GAAmBA,WAAnB;;;;;;;SAUFE,6DAAyBJ,aAA2C;WAC3DD,wBAAwB,CAAC,KAAKN,GAAN,EAAWO,WAAX,CAA/B;;;;;SAIFK,iCAAkC;WACzBjB,MAAM,CAACC,mCAAP,CAA2C,KAAKI,GAAhD,EAAqDa,KAAK,CAACC,GAA3D,CAAP;;;;;;;SAMFC,uBAAMC,gBAAwBC,kBAAmC;WACxD,IAAIT,MAAJ,CAAc,KAAKR,GAAnB,SAA0BgB,cAA1B,EAA4CC,gBAA5C,CAAP;;;;;;;;;;;;;;;;;SAgBFC,2BAAQA,UAAyB;QACzBC,MAAM,GAAG,IAAIX,MAAJ,CAAW,KAAKR,GAAhB,CAAf;IACAmB,MAAM,CAACC,UAAP,CAAkBF,QAAlB;WACOC,MAAP;;;;;;;SAMFE,+CAAiD;WACxC,KAAKX,aAAZ;;;;;;;;;SAQFU,iCAAWF,SAAiB;SACrBR,aAAL,GAAqBQ,OAArB;;;;;;;SAMFI,yCAAeC,iBAAyB;IACtCC,MAAM,CAACC,MAAP,CAAc,KAAKf,aAAnB,EAAkCa,eAAlC;;;;;;;;;SAQFG,+BAA8BC,QAA6B;gCACxB,KAAKhB,wBAAL,CAC/BgB,MAAM,CAAC1B,KADwB,CADwB;QACjDJ,QADiD,yBACjDA,QADiD;QACvCC,UADuC,yBACvCA,UADuC;;QAKrDD,QAAQ,CAAC+B,MAAT,KAAoB,CAAxB,EAA2B;UACrBD,MAAM,CAAC1B,KAAP,GAAeY,KAAK,CAACgB,KAAzB,EAAgC;;QAE9BC,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0D;UACxD/B,GAAG,EAAE2B,MAAM,CAAC3B,GAD4C;UAExDgC,OAAO,EAAEL,MAAM,CAACK;SAFlB;;;;;;QAQAlC,UAAJ,EAAgB;MACdA,UAAU,CAACmC,OAAX,CAAmB,UAACC,OAAD;eAAaA,OAAO,CAACP,MAAD,EAASA,MAAM,CAACT,OAAhB,CAApB;OAAnB;;;IAGFrB,QAAQ,CAACsC,IAAT,CAAc,UAAChC,OAAD;aAAaA,OAAO,CAACiC,MAAR,CAAeT,MAAf,MAA2B,KAAxC;KAAd;;;;;;;SAMFI,mBACEC,SACAK,UACApC,OACAqC,SACA;QAFArC,KAEA;MAFAA,KAEA,GAFgBY,KAAK,CAAC0B,IAEtB;;;QACMrB,OAAO,GAAGmB,QAAQ,IAAIA,QAAQ,CAACnB,OAArC;;QACImB,QAAJ,EAAc;aACLA,QAAQ,CAACnB,OAAhB;;;QAGIS,MAAiB;MACrB1B,KAAK,EAALA,KADqB;MAErBD,GAAG,EAAE,KAAKA,GAFW;MAGrBS,WAAW,EAAE,KAAKA,WAHG;MAIrB+B,QAAQ,EAAE,IAAIC,IAAJ,EAJW;MAKrBT,OAAO,EAAPA,OALqB;MAMrBd,OAAO,EAAEA,OAAO,IAAI,KAAKR,aANJ;MAOrB2B,QAAQ,EAARA,QAPqB;MAQrBK,KAAK,EAAE;OACJJ,OATkB,CAAvB;;SAWKZ,SAAL,CAAeC,MAAf;;;;;;;SAMFgB,uBACEX,SACAK,UACAO,gBACA;SACKb,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4BxB,KAAK,CAACgC,KAAlC,EAAyC;MAAED,cAAc,EAAdA;KAA3C;;;;;;;SAMFE,uBACEd,SACAK,UACAO,gBACA;SACKb,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4BxB,KAAK,CAACkC,KAAlC,EAAyC;MAAEH,cAAc,EAAdA;KAA3C;;;;;;;SAMFI,yBACEhB,SACAK,UACAO,gBACA;SACKb,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4BxB,KAAK,CAACoC,MAAlC,EAA0C;MAAEL,cAAc,EAAdA;KAA5C;;;;;;;SAMFM,qBACElB,SACAK,UACAO,gBACA;SACKb,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4BxB,KAAK,CAAC0B,IAAlC,EAAwC;MAAEK,cAAc,EAAdA;KAA1C;;;;;;;SAMFO,qBACEnB,SACAK,UACAO,gBACA;SACKb,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4BxB,KAAK,CAACuC,IAAlC,EAAwC;MAAER,cAAc,EAAdA;KAA1C;;;;;;;SAMFS,uBACErB,SACAK,UACAO,gBACA;QACIZ,OAAO,YAAYsB,KAAvB,EAA8B;UACtBC,gBAA2C,GAAG/B,MAAM,CAACC,MAAP,CAClD,EADkD,EAElDY,QAFkD,EAGlD;QACEgB,KAAK,EAAErB;OAJyC,CAApD;MAOAA,OAAO,GAAMuB,gBAAgB,CAACF,KAAjB,CAAuBG,IAA7B,UACLD,gBAAgB,CAACF,KAAjB,CAAuBrB,OADzB;WAGKD,GAAL,CAASC,OAAT,EAAkBuB,gBAAlB,EAAoC1C,KAAK,CAACgB,KAA1C,EAAiD;QAAEe,cAAc,EAAdA;OAAnD;KAXF,MAYO;WACAb,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4BxB,KAAK,CAACgB,KAAlC,EAAyC;QAAEe,cAAc,EAAdA;OAA3C;;;;;;;;SAOJa,6BACEzB,SACAK,UACAO,gBACA;SACKb,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4BxB,KAAK,CAAC6C,QAAlC,EAA4C;MAAEd,cAAc,EAAdA;KAA9C;;;;;;;SAMFe,uBACE3B,SACAK,UACAO,gBACA;SACKb,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4BxB,KAAK,CAAC+C,KAAlC,EAAyC;MAAEhB,cAAc,EAAdA;KAA3C;;;;;;;SAMFiB,uBACE7B,SACAK,UACAO,gBACA;SACKb,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4BxB,KAAK,CAACiD,KAAlC,EAAyC;MAAElB,cAAc,EAAdA;KAA3C;;;;;;;SAMFmB,uCAIE;UAEQ,IAAIT,KAAJ,CAAU,mDAAV,CAAN;;;;;;;SAeJU,mCAKE;UAEQ,IAAIV,KAAJ,CAAU,mDAAV,CAAN;;;;;;;SAaJW,2BACEjC,SACAK,UACAO,gBACA;SACKsB,WAAL,CAAiBlC,OAAjB,EAA0BK,QAA1B,EAAoCO,cAApC;;;;;;;SAMFsB,mCACElC,SACAK,UACAO,gBACA;SACKb,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4BxB,KAAK,CAAC0B,IAAlC,EAAwC;MACtCK,cAAc,EAAdA,cADsC;MAEtCuB,MAAM,EAAE,GAF8B;MAGtCC,MAAM,EAAE,CAAC,OAAD,EAAU,MAAV;KAHV;;;;;;;SAUFC,qCACErC,SACAK,UACAO,gBACA;SACKb,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4BxB,KAAK,CAACkC,KAAlC,EAAyC;MACvCH,cAAc,EAAdA,cADuC;MAEvCuB,MAAM,EAAE,GAF+B;MAGvCC,MAAM,EAAE,CAAC,OAAD;KAHV;;;;;;;SAUFE,qBACEtC,SACAK,UACAO,gBACA;SACK2B,QAAL,CAAcvC,OAAd,EAAuBK,QAAvB,EAAiCO,cAAjC;;;;;;;SAMF2B,6BACEvC,SACAK,UACAO,gBACA;SACKb,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4BxB,KAAK,CAAC0B,IAAlC,EAAwC;MACtCK,cAAc,EAAdA,cADsC;MAEtCuB,MAAM,EAAE,GAF8B;MAGtCC,MAAM,EAAE,CAAC,KAAD,EAAQ,MAAR;KAHV;;;;;;;SAUFI,+BACExC,SACAK,UACAO,gBACA;SACKb,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4BxB,KAAK,CAACkC,KAAlC,EAAyC;MACvCH,cAAc,EAAdA,cADuC;MAEvCuB,MAAM,EAAE,GAF+B;MAGvCC,MAAM,EAAE,CAAC,KAAD;KAHV;;;;;;;SAUFK,qBACEzC,SACAK,UACAO,gBACA3C,OACQ;QADRA,KACQ;MADRA,KACQ,GADQY,KAAK,CAACkC,KACd;;;QACJf,OAAJ,EAAa;WACND,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4BpC,KAA5B,EAAmC;QAAE2C,cAAc,EAAdA;OAArC;;;WAGKH,IAAI,CAACiC,GAAL,EAAP;;;SAGFC,6BACE3C,SACAK,UACAO,gBACQ;WACD,KAAK6B,IAAL,CAAUzC,OAAV,EAAmBK,QAAnB,EAA6BO,cAA7B,EAA6C/B,KAAK,CAAC0B,IAAnD,CAAP;;;;;;;;;;SASFqC,2BACEC,WACA7C,SACAK,UACAO,gBACA3C,OACAqC,SACA;QAFArC,KAEA;MAFAA,KAEA,GAFgBY,KAAK,CAACkC,KAEtB;;;QACM2B,GAAG,GAAGjC,IAAI,CAACiC,GAAL,EAAZ;QAEMI,QAAQ,GAAGJ,GAAG,GAAGG,SAAvB;QACIE,YAAJ;;QAEID,QAAQ,GAAG,IAAf,EAAqB;MACnBC,YAAY,GAAMD,QAAN,OAAZ;KADF,MAEO;UACCE,OAAO,GAAGF,QAAQ,GAAG,IAAX,GAAkBG,IAAI,CAACC,KAAL,CAAWJ,QAAQ,GAAG,IAAtB,CAAlB,GAAgD,CAAhE;MAEAC,YAAY,SAAMC,OAAO,GAAMA,OAAN,cAAwB,EAArC,KADDF,QAAQ,GAAGE,OAAO,GAAG,IACpB,QAAZ;;;QAGIzB,gBAA0C,GAAG/B,MAAM,CAACC,MAAP,CACjD,EADiD,EAEjDY,QAFiD,EAGjD;MACE0C,YAAY,EAAZA,YADF;MAEEI,MAAM,EAAEL;KALuC,CAAnD;SASK/C,GAAL,CAASC,OAAT,EAAkBuB,gBAAlB,EAAoCtD,KAApC,eAAgDqC,OAAhD;MAAyDM,cAAc,EAAdA;;;;;;;;SAM3DwC,mCACEX,MACAzC,SACAK,UACAO,gBACA;SACKgC,OAAL,CAAaH,IAAb,EAAmBzC,OAAnB,EAA4BK,QAA5B,EAAsCO,cAAtC,EAAsD/B,KAAK,CAAC0B,IAA5D;;;;;;;SAMF8C,iDACEZ,MACAzC,SACAK,UACAO,gBACA;SACKgC,OAAL,CAAaH,IAAb,EAAmBzC,OAAnB,EAA4BK,QAA5B,EAAsCO,cAAtC,EAAsD/B,KAAK,CAAC0B,IAA5D,EAAkE;MAChE4B,MAAM,EAAE,GADwD;MAEhEC,MAAM,EAAE,CAAC,OAAD,EAAU,MAAV;KAFV;;;;;;;;;;;;;;;;SAkBFkB,uBACEC,IACAlD,UACAO,gBACA;KACmCP,QAAQ,IAAI,EAC/C,EAAiBmD,YAAjB,GAAgCD,EAAE,CAAC/B,IAAnC;SACKzB,GAAL,CAAS,OAAT,EAAkBM,QAAlB,EAA4BxB,KAAK,CAACgC,KAAlC,EAAyC;MAAED,cAAc,EAAdA;KAA3C;;;;;;;;;;;;;;;;SAeF6C,qBACEF,IACAlD,UACAO,gBACA;QACMW,gBAAkD,GAAG/B,MAAM,CAACC,MAAP,CACzD,EADyD,EAEzDY,QAFyD,EAGzD;MACEmD,YAAY,EAAED,EAAE,CAAC/B;KAJsC,CAA3D;SAOKzB,GAAL,CAAS,MAAT,EAAiBwB,gBAAjB,EAAmC1C,KAAK,CAACgC,KAAzC,EAAgD;MAAED,cAAc,EAAdA;KAAlD;;;;;;;;;;;;;;;;;;;;;;SAqBF8C,qBACEH,IACAlD,UACAO,gBACA+C,UACA;QACI,OAAOtD,QAAP,KAAoB,UAAxB,EAAoC;MAClCsD,QAAQ,GAAGtD,QAAX;MACAA,QAAQ,GAAGuD,SAAX;KAFF,MAGO,IAAI,OAAOhD,cAAP,KAA0B,UAA9B,EAA0C;MAC/C+C,QAAQ,GAAG/C,cAAX;MACAA,cAAc,GAAGgD,SAAjB;;;SAGGN,KAAL,CAAWC,EAAX,EAAelD,QAAf,EAAyBO,cAAzB;IACC+C,QAAD;SACKF,IAAL,CAAUF,EAAV;;;;;;;;"}