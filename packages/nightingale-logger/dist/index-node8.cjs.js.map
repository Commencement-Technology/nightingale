{"version":3,"file":"index-node8.cjs.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport { PRODUCTION, POB_TARGET } from 'pob-babel';\nimport * as util from 'util';\nimport Level from 'nightingale-levels';\nimport {\n  Metadata,\n  MetadataStyles,\n  Styles,\n  Handler,\n  Processor,\n  Record,\n} from 'nightingale-types';\n\ndeclare const global: any;\n\nexport { Level };\n\nexport interface Options<T> {\n  symbol?: string;\n  metadataStyles?: MetadataStyles<T>;\n  styles?: Styles;\n}\n\nexport interface ComputedConfigForKey {\n  handlers: Handler[];\n  processors: Processor[];\n}\n\ninterface ExtendedErrorMetadata {\n  error: Error;\n}\n\ninterface ExtendedTimeMetadata {\n  readableTime: string;\n  timeMs: number;\n}\n\ninterface ExtendedFunctionNameMetadata {\n  functionName: string;\n}\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = (): ComputedConfigForKey => ({\n    handlers: [],\n    processors: [],\n  });\n}\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = (\n    key: string,\n    level: number,\n  ): ComputedConfigForKey => {\n    const {\n      handlers,\n      processors,\n    }: ComputedConfigForKey = global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n    return {\n      handlers: handlers.filter(\n        (handler) =>\n          level >= handler.minLevel &&\n          (!handler.isHandling || handler.isHandling(level, key)),\n      ),\n      processors,\n    };\n  };\n}\n\n/** @private */\nfunction getConfigForLoggerRecord(\n  key: string,\n  recordLevel: Level,\n): ComputedConfigForKey {\n  return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD(key, recordLevel);\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n  private contextObject?: object;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  constructor(readonly key: string, readonly displayName?: string) {\n    this.key = key;\n    this.displayName = displayName;\n\n    if (!PRODUCTION && key.includes('.')) {\n      throw new Error(\n        `nightingale: \\`.\\` in key is no longer supported (key: ${key})`,\n      );\n    }\n  }\n\n  /** @private */\n  getHandlersAndProcessors(recordLevel: number): ComputedConfigForKey {\n    return getConfigForLoggerRecord(this.key, recordLevel);\n  }\n\n  /** @private */\n  getConfig(): ComputedConfigForKey {\n    return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(this.key, Level.ALL);\n  }\n\n  /**\n   * Create a child logger\n   */\n  child(childSuffixKey: string, childDisplayName?: string): Logger {\n    return new Logger(`${this.key}:${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * const loggerMyService = new Logger('app.myService');\n   * function someAction(arg1) {\n   *     const logger = loggerMyService.context({ arg1 });\n   *     logger.info('starting');\n   *     // do stuff\n   *     logger.info('done');\n   * }\n   *\n   */\n  context(context: object): Logger {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Get the context of this logger\n   */\n  getContextObject(): Readonly<object> | undefined {\n    return this.contextObject;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  setContext(context: object) {\n    this.contextObject = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   */\n  extendsContext(extendedContext: Object) {\n    Object.assign(this.contextObject, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   */\n  addRecord<T extends Metadata>(record: Readonly<Record<T>>) {\n    const { handlers, processors } = this.getHandlersAndProcessors(\n      record.level,\n    );\n\n    if (handlers.length === 0) {\n      if (record.level > Level.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach((process) => process(record, record.context));\n    }\n\n    handlers.some((handler) => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   */\n  log<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    level: number = Level.INFO,\n    options?: Options<T>,\n  ) {\n    const context = metadata && metadata.context;\n    if (metadata) {\n      delete metadata.context;\n    }\n\n    const record: Record<T> = {\n      level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message,\n      context: context || this.contextObject,\n      metadata,\n      extra: {},\n      ...options,\n    };\n    this.addRecord(record);\n  }\n\n  /**\n   * Log a trace message\n   */\n  trace<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log a debug message\n   */\n  debug<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Notice an info message\n   */\n  notice<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.NOTICE, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   */\n  info<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   */\n  warn<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   */\n  error<T extends Metadata>(\n    message: string | Error,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    if (message instanceof Error) {\n      const extendedMetadata: T & ExtendedErrorMetadata = Object.assign(\n        {},\n        metadata,\n        {\n          error: message,\n        },\n      );\n      message = `${extendedMetadata.error.name}: ${\n        extendedMetadata.error.message\n      }`;\n      this.log(message, extendedMetadata, Level.ERROR, { metadataStyles });\n    } else {\n      this.log(message, metadata, Level.ERROR, { metadataStyles });\n    }\n  }\n\n  /**\n   * Log an critical message\n   */\n  critical<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.CRITICAL, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   */\n  fatal<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   */\n  alert<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   */\n  inspectValue<T extends Metadata>(\n    value: any,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    if (POB_TARGET === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      // Note: inspect is a special function for node:\n      // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n      value = util.inspect(value, { depth: 6 });\n      this.log(value, metadata, Level.DEBUG, {\n        metadataStyles,\n        styles: ['gray'],\n      });\n    }\n  }\n\n  /**\n   * Log a debugged var\n   */\n  inspectVar<T extends Metadata>(\n    varName: string,\n    varValue: any,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    if (POB_TARGET === 'browser') {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      varValue = util.inspect(varValue, { depth: 6 });\n      this.log(`${varName} = ${varValue}`, metadata, Level.DEBUG, {\n        metadataStyles,\n        styles: ['cyan'],\n      });\n    }\n  }\n\n  /**\n   * Alias for infoSuccess\n   */\n  success<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   */\n  infoSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   */\n  debugSuccess<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   */\n  fail<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.infoFail(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   */\n  infoFail<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   */\n  debugFail<T extends Metadata>(\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.log(message, metadata, Level.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @returns {number} time to pass to timeEnd\n   */\n  time<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n  ): number {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  infoTime<T extends Metadata>(\n    message?: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ): number {\n    return this.time(message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   */\n  timeEnd<T extends Metadata>(\n    startTime: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n    level: number = Level.DEBUG,\n    options?: Options<T>,\n  ) {\n    const now = Date.now();\n\n    const diffTime = now - startTime;\n    let readableTime;\n\n    if (diffTime < 1000) {\n      readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 ? Math.floor(diffTime / 1000) : 0;\n      const ms = diffTime - seconds * 1000;\n      readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    const extendedMetadata: T & ExtendedTimeMetadata = Object.assign(\n      {},\n      metadata,\n      {\n        readableTime,\n        timeMs: diffTime,\n      },\n    );\n\n    this.log(message, extendedMetadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoSuccessTimeEnd<T extends Metadata>(\n    time: number,\n    message: string,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    this.timeEnd(time, message, metadata, metadataStyles, Level.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * class A {\n   *   method(arg1) {\n   *     logger.enter(method, { arg1 });\n   *     // Do your stuff\n   *   }\n   * }\n   *\n   */\n  enter<T extends Metadata>(\n    fn: Function,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T>,\n  ) {\n    const extendedMetadata: Metadata = metadata || {};\n    extendedMetadata.functionName = fn.name;\n    this.log('enter', metadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n   *   method(arg1) {\n   *     // Do your stuff\n   *     logger.exit(method, { arg1 });\n   *   }\n   * }\n   */\n  exit<T extends Metadata>(\n    fn: Function,\n    metadata?: T,\n    metadataStyles?: MetadataStyles<T & { functionName: string }>,\n  ) {\n    const extendedMetadata: T & ExtendedFunctionNameMetadata = Object.assign(\n      {},\n      metadata,\n      {\n        functionName: fn.name,\n      },\n    );\n    this.log('exit', extendedMetadata, Level.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n   *   method() {\n   *     logger.wrap(method, () => {\n   *       // Do your stuff\n   *     });\n   *   }\n   * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {Function} callback\n   */\n  wrap<T extends Metadata>(\n    fn: Function,\n    metadata?: T | Function,\n    metadataStyles?: MetadataStyles<T> | Function,\n    callback?: Function,\n  ) {\n    if (typeof metadata === 'function') {\n      callback = metadata;\n      metadata = undefined;\n    } else if (typeof metadataStyles === 'function') {\n      callback = metadataStyles;\n      metadataStyles = undefined;\n    }\n\n    this.enter(fn, metadata, metadataStyles as MetadataStyles<T>);\n    (callback as Function)();\n    this.exit(fn);\n  }\n}\n"],"names":["global","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","handlers","processors","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","key","level","filter","handler","minLevel","isHandling","getConfigForLoggerRecord","recordLevel","Logger","constructor","displayName","contextObject","getHandlersAndProcessors","getConfig","Level","ALL","child","childSuffixKey","childDisplayName","context","logger","setContext","getContextObject","extendsContext","extendedContext","Object","assign","addRecord","record","length","ERROR","console","log","message","forEach","process","some","handle","metadata","INFO","options","datetime","Date","extra","trace","metadataStyles","TRACE","debug","DEBUG","notice","NOTICE","info","warn","WARN","error","Error","extendedMetadata","name","critical","CRITICAL","fatal","FATAL","alert","ALERT","inspectValue","value","util","depth","styles","inspectVar","varName","varValue","success","infoSuccess","symbol","debugSuccess","fail","infoFail","debugFail","time","now","infoTime","timeEnd","startTime","diffTime","readableTime","seconds","Math","floor","timeMs","infoTimeEnd","infoSuccessTimeEnd","enter","fn","functionName","exit","wrap","callback","undefined"],"mappings":"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"}