{"version":3,"file":"index-browser.es.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable complexity */\nimport { Level } from 'nightingale-levels';\n\nconst specialRegexpChars = /[$()+.?[\\\\\\]^{|}]/;\n\ntype TestFunction = (string: string) => boolean;\nexport type DebugValueType = string | RegExp | string[];\n\nconst createTestFunctionFromRegexp =\n  (regexp: RegExp): TestFunction =>\n  (string: string) =>\n    regexp.test(string);\n\nconst createTestFunctionFromRegexpString = (value: string): TestFunction => {\n  if (!value.endsWith('/')) throw new Error('Invalid RegExp DEBUG value');\n  return createTestFunctionFromRegexp(new RegExp(value.slice(1, -1)));\n};\n\nconst createTestFunctionFromValue = (value: string): TestFunction => {\n  if (value.endsWith(':*')) {\n    value = value.slice(0, -2);\n    return (string: string) => string.startsWith(value);\n  }\n\n  return (string: string) => string === value;\n};\n\nexport type FindDebugLevel = (minLevel: Level, key: string) => Level;\n\nexport function createFindDebugLevel(\n  debugValue?: DebugValueType,\n): FindDebugLevel {\n  let isWildcard = false;\n  const debugValues: TestFunction[] = [];\n  const skips: TestFunction[] = [];\n\n  if (!Array.isArray(debugValue)) {\n    if (debugValue instanceof RegExp) {\n      debugValues.push(createTestFunctionFromRegexp(debugValue));\n      debugValue = undefined;\n    } else if (debugValue) {\n      debugValue = debugValue.trim();\n\n      if (debugValue.startsWith('/')) {\n        debugValues.push(createTestFunctionFromRegexpString(debugValue));\n        debugValue = undefined;\n      } else {\n        debugValue = debugValue.split(/[\\s,]+/);\n      }\n    }\n  }\n\n  if (debugValue) {\n    (debugValue as string[]).forEach((value) => {\n      if (specialRegexpChars.test(value)) {\n        throw new Error(\n          `Invalid debug value: \"${value}\" (contains special chars)`,\n        );\n      }\n\n      if (!value) return;\n\n      if (value === '*') {\n        isWildcard = true;\n        return;\n      }\n\n      if (value.startsWith('-')) {\n        skips.push(createTestFunctionFromValue(value.slice(1)));\n      } else if (!isWildcard) {\n        debugValues.push(createTestFunctionFromValue(value));\n      }\n    });\n  }\n\n  if (isWildcard) {\n    if (skips.length === 0) {\n      return () => Level.ALL;\n    } else {\n      return (minLevel: Level, key: string) =>\n        skips.some((skip) => skip(key)) ? minLevel : Level.ALL;\n    }\n  }\n\n  if (debugValues.length === 0) {\n    return (minLevel: Level) => minLevel;\n  }\n\n  return (minLevel: Level, key: string) => {\n    if (minLevel === Level.ALL || !key) {\n      return minLevel;\n    }\n\n    if (debugValues.some((dv) => dv(key))) {\n      return skips.some((skip) => skip(key)) ? minLevel : Level.ALL;\n    }\n\n    return minLevel;\n  };\n}\n"],"names":["specialRegexpChars","createTestFunctionFromRegexp","regexp","string","test","createTestFunctionFromRegexpString","value","endsWith","Error","RegExp","slice","createTestFunctionFromValue","startsWith","createFindDebugLevel","debugValue","isWildcard","debugValues","skips","Array","isArray","push","undefined","trim","split","forEach","length","Level","ALL","minLevel","key","some","skip","dv"],"mappings":"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"}