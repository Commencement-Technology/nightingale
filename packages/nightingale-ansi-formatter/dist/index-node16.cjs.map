{"version":3,"file":"index-node16.cjs","sources":["../src/index.ts"],"sourcesContent":["import ansi from 'ansi-styles';\nimport { styleToHexColor, formatRecordToString } from 'nightingale-formatter';\nimport type { Styles, LogRecord, Metadata } from 'nightingale-types';\n\nexport type { Styles } from 'nightingale-types';\n\ninterface CodePair {\n  open: string;\n  close: string;\n}\n\ntype AnsiStyles = Record<string, CodePair | undefined>;\n\nconst ansiStyles: AnsiStyles = {\n  black: ansi.black,\n  red: ansi.red,\n  green: ansi.green,\n  yellow: ansi.yellow,\n  blue: ansi.blue,\n  magenta: ansi.magenta,\n  cyan: ansi.cyan,\n  white: ansi.white,\n  gray: ansi.gray,\n\n  bgBlack: ansi.bgBlack,\n  bgRed: ansi.bgRed,\n  bgGreen: ansi.bgGreen,\n  bgYellow: ansi.bgYellow,\n  bgBlue: ansi.bgBlue,\n  bgMagenta: ansi.bgMagenta,\n  bgCyan: ansi.bgCyan,\n  bgWhite: ansi.bgWhite,\n\n  bold: ansi.bold,\n  underline: ansi.underline,\n\n  // http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html\n  orange: {\n    open: ansi.color.ansi256.hex(styleToHexColor.orange),\n    close: ansi.color.close,\n  },\n  'gray-light': {\n    open: ansi.color.ansi256.hex(styleToHexColor['gray-light']),\n    close: ansi.color.close,\n  },\n};\n\nexport function style(styles: Styles, string: string): string {\n  if (!styles || styles.length === 0 || !string) {\n    return string;\n  }\n\n  // eslint-disable-next-line unicorn/no-array-reduce\n  return styles.reduce((styledString: string, styleName: string) => {\n    const codePair: CodePair | undefined = ansiStyles[styleName];\n\n    if (!codePair) {\n      throw new Error(`Unknown style: ${styleName}`);\n    }\n\n    return codePair.open + styledString + codePair.close;\n  }, string);\n}\n\n/**\n * @param {Object} record\n * @returns {string}\n */\nexport default function ansiFormat<T extends Metadata>(\n  record: LogRecord<T>,\n): string {\n  return formatRecordToString(record, style);\n}\n"],"names":["ansiStyles","black","ansi","red","green","yellow","blue","magenta","cyan","white","gray","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","bold","underline","orange","open","color","ansi256","hex","styleToHexColor","close","style","styles","string","length","reduce","styledString","styleName","codePair","Error","ansiFormat","record","formatRecordToString"],"mappings":";;;;;;;;;;;AAaA,MAAMA,UAAsB,GAAG;EAC7BC,KAAK,EAAEC,aAAI,CAACD,KAAK;EACjBE,GAAG,EAAED,aAAI,CAACC,GAAG;EACbC,KAAK,EAAEF,aAAI,CAACE,KAAK;EACjBC,MAAM,EAAEH,aAAI,CAACG,MAAM;EACnBC,IAAI,EAAEJ,aAAI,CAACI,IAAI;EACfC,OAAO,EAAEL,aAAI,CAACK,OAAO;EACrBC,IAAI,EAAEN,aAAI,CAACM,IAAI;EACfC,KAAK,EAAEP,aAAI,CAACO,KAAK;EACjBC,IAAI,EAAER,aAAI,CAACQ,IAAI;EAEfC,OAAO,EAAET,aAAI,CAACS,OAAO;EACrBC,KAAK,EAAEV,aAAI,CAACU,KAAK;EACjBC,OAAO,EAAEX,aAAI,CAACW,OAAO;EACrBC,QAAQ,EAAEZ,aAAI,CAACY,QAAQ;EACvBC,MAAM,EAAEb,aAAI,CAACa,MAAM;EACnBC,SAAS,EAAEd,aAAI,CAACc,SAAS;EACzBC,MAAM,EAAEf,aAAI,CAACe,MAAM;EACnBC,OAAO,EAAEhB,aAAI,CAACgB,OAAO;EAErBC,IAAI,EAAEjB,aAAI,CAACiB,IAAI;EACfC,SAAS,EAAElB,aAAI,CAACkB,SAAS;AAEzB;AACAC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAEpB,aAAI,CAACqB,KAAK,CAACC,OAAO,CAACC,GAAG,CAACC,oCAAe,CAACL,MAAM,CAAC;AACpDM,IAAAA,KAAK,EAAEzB,aAAI,CAACqB,KAAK,CAACI,KAAAA;GACnB;AACD,EAAA,YAAY,EAAE;AACZL,IAAAA,IAAI,EAAEpB,aAAI,CAACqB,KAAK,CAACC,OAAO,CAACC,GAAG,CAACC,oCAAe,CAAC,YAAY,CAAC,CAAC;AAC3DC,IAAAA,KAAK,EAAEzB,aAAI,CAACqB,KAAK,CAACI,KAAAA;AACpB,GAAA;AACF,CAAC,CAAA;AAEM,SAASC,KAAK,CAACC,MAAc,EAAEC,MAAc,EAAU;EAC5D,IAAI,CAACD,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,CAAC,IAAI,CAACD,MAAM,EAAE;AAC7C,IAAA,OAAOA,MAAM,CAAA;AACf,GAAA;;AAEA;EACA,OAAOD,MAAM,CAACG,MAAM,CAAC,CAACC,YAAoB,EAAEC,SAAiB,KAAK;AAChE,IAAA,MAAMC,QAA8B,GAAGnC,UAAU,CAACkC,SAAS,CAAC,CAAA;IAE5D,IAAI,CAACC,QAAQ,EAAE;AACb,MAAA,MAAM,IAAIC,KAAK,CAAE,CAAiBF,eAAAA,EAAAA,SAAU,EAAC,CAAC,CAAA;AAChD,KAAA;IAEA,OAAOC,QAAQ,CAACb,IAAI,GAAGW,YAAY,GAAGE,QAAQ,CAACR,KAAK,CAAA;GACrD,EAAEG,MAAM,CAAC,CAAA;AACZ,CAAA;;AAEA;AACA;AACA;AACA;AACe,SAASO,UAAU,CAChCC,MAAoB,EACZ;AACR,EAAA,OAAOC,yCAAoB,CAACD,MAAM,EAAEV,KAAK,CAAC,CAAA;AAC5C;;;;;"}