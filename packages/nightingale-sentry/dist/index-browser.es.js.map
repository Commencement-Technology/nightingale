{"version":3,"file":"index-browser.es.js","sources":["../src/index.ts"],"sourcesContent":["import type {\n  addBreadcrumb,\n  captureException,\n  captureMessage,\n} from '@sentry/core';\nimport type { User, SeverityLevel } from '@sentry/types';\nimport { Level } from 'nightingale-levels';\nimport type { LogRecord, Handle, Metadata, Handler } from 'nightingale-types';\n\nconst mapToSentryLevel: Record<Level, SeverityLevel> = {\n  [Level.TRACE]: 'debug',\n  [Level.DEBUG]: 'debug',\n  [Level.INFO]: 'info',\n  [Level.NOTICE]: 'log',\n  [Level.WARNING]: 'warning',\n  [Level.ERROR]: 'error',\n  [Level.CRITICAL]: 'fatal',\n  [Level.FATAL]: 'fatal',\n  [Level.EMERGENCY]: 'fatal',\n  // not a level\n  [Level.ALL]: 'error',\n};\n\nexport interface MetadataWithError extends Metadata {\n  error?: Error;\n}\n\nexport interface Options {\n  getUser?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => User | undefined;\n  getTags?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => Record<string, string>;\n  getBreadcrumbCategory?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => string | undefined;\n  getBreadcrumbType?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => string | undefined;\n  shouldSendAsException?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => boolean;\n  shouldSendAsBreadcrumb?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => boolean;\n}\n\nexport interface SentryRequiredMethods {\n  addBreadcrumb: typeof addBreadcrumb;\n  captureException: typeof captureException;\n  captureMessage: typeof captureMessage;\n}\n\nconst createHandler = <S extends SentryRequiredMethods>(\n  Sentry: S,\n  {\n    getUser = () => undefined,\n    getTags = () => ({}),\n    getBreadcrumbCategory = () => undefined,\n    getBreadcrumbType = () => undefined,\n    shouldSendAsException = <T extends Metadata>(record: LogRecord<T>) =>\n      record.metadata?.error !== undefined &&\n      record.metadata.unhandled !== true,\n    shouldSendAsBreadcrumb = <T extends Metadata>(record: LogRecord<T>) =>\n      false,\n  }: Options = {},\n): Handle => {\n  return <T extends MetadataWithError>(record: LogRecord<T>) => {\n    const { key, level, metadata, extra, message } = record;\n\n    if (shouldSendAsException(record)) {\n      const error = metadata?.error || record.message;\n\n      const extraData: Record<string, unknown> = {\n        nightingaleErrorMessage: message,\n        ...metadata,\n        ...extra,\n      };\n      delete extraData.error;\n\n      Sentry.captureException(error, {\n        level: mapToSentryLevel[level] || 'error',\n        user: getUser(record),\n        tags: {\n          loggerKey: key,\n          ...getTags(record),\n        },\n        extra: extraData,\n      });\n    } else if (shouldSendAsBreadcrumb(record)) {\n      Sentry.addBreadcrumb({\n        level: mapToSentryLevel[level] || 'error',\n        category: getBreadcrumbCategory(record),\n        type: getBreadcrumbType(record),\n        message: record.message,\n        data: record.metadata,\n        timestamp: record.datetime.getTime(),\n      });\n    }\n  };\n};\n\nexport class SentryHandler<S extends SentryRequiredMethods> implements Handler {\n  minLevel: Level;\n\n  handle: Handle;\n\n  constructor(Sentry: S, minLevel: Level, options?: Options) {\n    this.minLevel = minLevel;\n    this.handle = createHandler<S>(Sentry, options);\n  }\n}\n"],"names":["mapToSentryLevel","Level","TRACE","DEBUG","INFO","NOTICE","WARNING","ERROR","CRITICAL","FATAL","EMERGENCY","ALL","createHandler","Sentry","getUser","undefined","getTags","getBreadcrumbCategory","getBreadcrumbType","shouldSendAsException","record","_record$metadata","metadata","error","unhandled","shouldSendAsBreadcrumb","key","level","extra","message","extraData","nightingaleErrorMessage","captureException","user","tags","loggerKey","addBreadcrumb","category","type","data","timestamp","datetime","getTime","SentryHandler","constructor","minLevel","options","handle"],"mappings":";;AASA,MAAMA,gBAA8C,GAAG;AACrD,EAAA,CAACC,KAAK,CAACC,KAAK,GAAG,OAAO;AACtB,EAAA,CAACD,KAAK,CAACE,KAAK,GAAG,OAAO;AACtB,EAAA,CAACF,KAAK,CAACG,IAAI,GAAG,MAAM;AACpB,EAAA,CAACH,KAAK,CAACI,MAAM,GAAG,KAAK;AACrB,EAAA,CAACJ,KAAK,CAACK,OAAO,GAAG,SAAS;AAC1B,EAAA,CAACL,KAAK,CAACM,KAAK,GAAG,OAAO;AACtB,EAAA,CAACN,KAAK,CAACO,QAAQ,GAAG,OAAO;AACzB,EAAA,CAACP,KAAK,CAACQ,KAAK,GAAG,OAAO;AACtB,EAAA,CAACR,KAAK,CAACS,SAAS,GAAG,OAAO;AAC1B;EACA,CAACT,KAAK,CAACU,GAAG,GAAG,OAAA;AACf,CAAC,CAAA;AAiCD,MAAMC,aAAa,GAAGA,CACpBC,MAAS,EACT;EACEC,OAAO,GAAGA,MAAMC,SAAS;AACzBC,EAAAA,OAAO,GAAGA,OAAO,EAAE,CAAC;EACpBC,qBAAqB,GAAGA,MAAMF,SAAS;EACvCG,iBAAiB,GAAGA,MAAMH,SAAS;AACnCI,EAAAA,qBAAqB,GAAwBC,MAAoB,IAAA;AAAA,IAAA,IAAAC,gBAAA,CAAA;AAAA,IAAA,OAC/D,EAAAA,gBAAA,GAAAD,MAAM,CAACE,QAAQ,qBAAfD,gBAAA,CAAiBE,KAAK,MAAKR,SAAS,IACpCK,MAAM,CAACE,QAAQ,CAACE,SAAS,KAAK,IAAI,CAAA;AAAA,GAAA;EACpCC,sBAAsB,GAAGA,MACvB,KAAA;AACK,CAAC,GAAG,EAAE,KACJ;AACX,EAAA,OAAqCL,MAAoB,IAAK;IAC5D,MAAM;MAAEM,GAAG;MAAEC,KAAK;MAAEL,QAAQ;MAAEM,KAAK;AAAEC,MAAAA,OAAAA;AAAQ,KAAC,GAAGT,MAAM,CAAA;AAEvD,IAAA,IAAID,qBAAqB,CAACC,MAAM,CAAC,EAAE;MACjC,MAAMG,KAAK,GAAG,CAAAD,QAAQ,IAAA,IAAA,GAAA,KAAA,CAAA,GAARA,QAAQ,CAAEC,KAAK,KAAIH,MAAM,CAACS,OAAO,CAAA;AAE/C,MAAA,MAAMC,SAAkC,GAAG;AACzCC,QAAAA,uBAAuB,EAAEF,OAAO;AAChC,QAAA,GAAGP,QAAQ;QACX,GAAGM,KAAAA;OACJ,CAAA;MACD,OAAOE,SAAS,CAACP,KAAK,CAAA;AAEtBV,MAAAA,MAAM,CAACmB,gBAAgB,CAACT,KAAK,EAAE;AAC7BI,QAAAA,KAAK,EAAE3B,gBAAgB,CAAC2B,KAAK,CAAC,IAAI,OAAO;AACzCM,QAAAA,IAAI,EAAEnB,OAAO,CAACM,MAAM,CAAC;AACrBc,QAAAA,IAAI,EAAE;AACJC,UAAAA,SAAS,EAAET,GAAG;UACd,GAAGV,OAAO,CAACI,MAAM,CAAA;SAClB;AACDQ,QAAAA,KAAK,EAAEE,SAAAA;AACT,OAAC,CAAC,CAAA;AACJ,KAAC,MAAM,IAAIL,sBAAsB,CAACL,MAAM,CAAC,EAAE;MACzCP,MAAM,CAACuB,aAAa,CAAC;AACnBT,QAAAA,KAAK,EAAE3B,gBAAgB,CAAC2B,KAAK,CAAC,IAAI,OAAO;AACzCU,QAAAA,QAAQ,EAAEpB,qBAAqB,CAACG,MAAM,CAAC;AACvCkB,QAAAA,IAAI,EAAEpB,iBAAiB,CAACE,MAAM,CAAC;QAC/BS,OAAO,EAAET,MAAM,CAACS,OAAO;QACvBU,IAAI,EAAEnB,MAAM,CAACE,QAAQ;AACrBkB,QAAAA,SAAS,EAAEpB,MAAM,CAACqB,QAAQ,CAACC,OAAO,EAAC;AACrC,OAAC,CAAC,CAAA;AACJ,KAAA;GACD,CAAA;AACH,CAAC,CAAA;AAEM,MAAMC,aAAa,CAAqD;AAK7EC,EAAAA,WAAWA,CAAC/B,MAAS,EAAEgC,QAAe,EAAEC,OAAiB,EAAE;IACzD,IAAI,CAACD,QAAQ,GAAGA,QAAQ,CAAA;IACxB,IAAI,CAACE,MAAM,GAAGnC,aAAa,CAAIC,MAAM,EAAEiC,OAAO,CAAC,CAAA;AACjD,GAAA;AACF;;;;"}