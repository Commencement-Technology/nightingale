{"version":3,"file":"index-browsermodern.es.js","sources":["../src/index.ts"],"sourcesContent":["import { POB_TARGET } from 'pob-babel';\nimport type {\n  addBreadcrumb,\n  captureException,\n  captureMessage,\n} from '@sentry/core';\nimport * as SentryNode from '@sentry/node';\nimport type { User } from '@sentry/types';\nimport { Severity } from '@sentry/types';\nimport { Level } from 'nightingale-levels';\nimport type { LogRecord, Handle, Metadata, Handler } from 'nightingale-types';\n\nconst mapToSentryLevel: Record<Level, Severity> = {\n  [Level.TRACE]: Severity.Debug,\n  [Level.DEBUG]: Severity.Debug,\n  [Level.INFO]: Severity.Info,\n  [Level.NOTICE]: Severity.Log,\n  [Level.WARNING]: Severity.Warning,\n  [Level.ERROR]: Severity.Error,\n  [Level.CRITICAL]: Severity.Critical,\n  [Level.FATAL]: Severity.Fatal,\n  [Level.EMERGENCY]: Severity.Critical,\n  // not a level\n  [Level.ALL]: Severity.Error,\n};\n\nexport interface MetadataWithError extends Metadata {\n  error?: Error;\n}\n\nexport interface Options {\n  getUser?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => User | undefined;\n  getTags?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => Record<string, string>;\n  getBreadcrumbCategory?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => string | undefined;\n  getBreadcrumbType?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => string | undefined;\n  shouldSendAsException?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => boolean;\n  shouldSendAsBreadcrumb?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => boolean;\n}\n\ninterface SentryRequiredMethods {\n  addBreadcrumb: typeof addBreadcrumb;\n  captureException: typeof captureException;\n  captureMessage: typeof captureMessage;\n}\n\nconst createHandler = <S extends SentryRequiredMethods>(\n  Sentry: S,\n  {\n    getUser = () => undefined,\n    getTags = () => ({}),\n    getBreadcrumbCategory = () => undefined,\n    getBreadcrumbType = () => undefined,\n    shouldSendAsException = <T extends Metadata>(record: LogRecord<T>) =>\n      record.metadata?.error !== undefined &&\n      record.metadata.unhandled !== true,\n    shouldSendAsBreadcrumb = <T extends Metadata>(record: LogRecord<T>) =>\n      false,\n  }: Options = {},\n): Handle => {\n  return <T extends MetadataWithError>(record: LogRecord<T>) => {\n    const { key, level, metadata, extra } = record;\n\n    if (shouldSendAsException(record)) {\n      const error = metadata?.error || record.message;\n\n      const extraData: Record<string, unknown> = { ...metadata, ...extra };\n      delete extraData.error;\n\n      Sentry.captureException(error, {\n        level: mapToSentryLevel[level] || Severity.Error,\n        user: getUser(record),\n        tags: {\n          loggerKey: key,\n          ...getTags(record),\n        },\n        extra: extraData,\n      });\n    } else if (shouldSendAsBreadcrumb(record)) {\n      Sentry.addBreadcrumb({\n        level: mapToSentryLevel[level] || Severity.Error,\n        category: getBreadcrumbCategory(record),\n        type: getBreadcrumbType(record),\n        message: record.message,\n        data: record.metadata,\n        timestamp: record.datetime.getTime(),\n      });\n    }\n  };\n};\n\nexport class SentryHandler<S extends SentryRequiredMethods> implements Handler {\n  minLevel: Level;\n\n  handle: Handle;\n\n  constructor(Sentry: string | S, minLevel: Level, options?: Options) {\n    this.minLevel = minLevel;\n    if (POB_TARGET === 'node' && typeof Sentry === 'string') {\n      console.warn(\n        'nightingale-sentry: Passing DSN directly is deprecated, pass Sentry instead and init in your app.',\n      );\n      SentryNode.init({ dsn: Sentry });\n      this.handle = createHandler(SentryNode, options);\n    } else {\n      this.handle = createHandler<S>(Sentry as S, options);\n    }\n  }\n}\n"],"names":["mapToSentryLevel","Level","TRACE","Severity","Debug","DEBUG","INFO","Info","NOTICE","Log","WARNING","Warning","ERROR","Error","CRITICAL","Critical","FATAL","Fatal","EMERGENCY","ALL","createHandler","Sentry","getUser","undefined","getTags","getBreadcrumbCategory","getBreadcrumbType","shouldSendAsException","record","metadata","error","unhandled","shouldSendAsBreadcrumb","key","level","extra","message","extraData","captureException","user","tags","loggerKey","addBreadcrumb","category","type","data","timestamp","datetime","getTime","SentryHandler","constructor","minLevel","options","handle"],"mappings":"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"}