{"version":3,"file":"index-browsermodern.es.js","sources":["../src/index.ts"],"sourcesContent":["import { POB_TARGET } from 'pob-babel';\nimport type {\n  addBreadcrumb,\n  captureException,\n  captureMessage,\n} from '@sentry/core';\nimport * as SentryNode from '@sentry/node';\nimport type { User } from '@sentry/types';\nimport { Severity } from '@sentry/types';\nimport { Level } from 'nightingale-levels';\nimport type { LogRecord, Handle, Metadata, Handler } from 'nightingale-types';\n\nconst mapToSentryLevel: Record<Level, Severity> = {\n  [Level.TRACE]: Severity.Debug,\n  [Level.DEBUG]: Severity.Debug,\n  [Level.INFO]: Severity.Info,\n  [Level.NOTICE]: Severity.Log,\n  [Level.WARNING]: Severity.Warning,\n  [Level.ERROR]: Severity.Error,\n  [Level.CRITICAL]: Severity.Critical,\n  [Level.FATAL]: Severity.Fatal,\n  [Level.EMERGENCY]: Severity.Critical,\n  // not a level\n  [Level.ALL]: Severity.Error,\n};\n\nexport interface MetadataWithError extends Metadata {\n  error?: Error;\n}\n\nexport interface Options {\n  getUser?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => User | undefined;\n  getTags?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => Record<string, string>;\n  getBreadcrumbCategory?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => string | undefined;\n  getBreadcrumbType?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => string | undefined;\n  shouldSendAsException?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => boolean;\n  shouldSendAsBreadcrumb?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => boolean;\n}\n\nexport interface SentryRequiredMethods {\n  addBreadcrumb: typeof addBreadcrumb;\n  captureException: typeof captureException;\n  captureMessage: typeof captureMessage;\n}\n\nconst createHandler = <S extends SentryRequiredMethods>(\n  Sentry: S,\n  {\n    getUser = () => undefined,\n    getTags = () => ({}),\n    getBreadcrumbCategory = () => undefined,\n    getBreadcrumbType = () => undefined,\n    shouldSendAsException = <T extends Metadata>(record: LogRecord<T>) =>\n      record.metadata?.error !== undefined &&\n      record.metadata.unhandled !== true,\n    shouldSendAsBreadcrumb = <T extends Metadata>(record: LogRecord<T>) =>\n      false,\n  }: Options = {},\n): Handle => {\n  return <T extends MetadataWithError>(record: LogRecord<T>) => {\n    const { key, level, metadata, extra } = record;\n\n    if (shouldSendAsException(record)) {\n      const error = metadata?.error || record.message;\n\n      const extraData: Record<string, unknown> = { ...metadata, ...extra };\n      delete extraData.error;\n\n      Sentry.captureException(error, {\n        level: mapToSentryLevel[level] || Severity.Error,\n        user: getUser(record),\n        tags: {\n          loggerKey: key,\n          ...getTags(record),\n        },\n        extra: extraData,\n      });\n    } else if (shouldSendAsBreadcrumb(record)) {\n      Sentry.addBreadcrumb({\n        level: mapToSentryLevel[level] || Severity.Error,\n        category: getBreadcrumbCategory(record),\n        type: getBreadcrumbType(record),\n        message: record.message,\n        data: record.metadata,\n        timestamp: record.datetime.getTime(),\n      });\n    }\n  };\n};\n\nexport class SentryHandler<S extends SentryRequiredMethods> implements Handler {\n  minLevel: Level;\n\n  handle: Handle;\n\n  constructor(Sentry: string | S, minLevel: Level, options?: Options) {\n    this.minLevel = minLevel;\n    if (POB_TARGET === 'node' && typeof Sentry === 'string') {\n      console.warn(\n        'nightingale-sentry: Passing DSN directly is deprecated, pass Sentry instead and init in your app.',\n      );\n      SentryNode.init({ dsn: Sentry });\n      this.handle = createHandler(SentryNode, options);\n    } else {\n      this.handle = createHandler<S>(Sentry as S, options);\n    }\n  }\n}\n"],"names":["mapToSentryLevel","Level","TRACE","Severity","Debug","DEBUG","INFO","Info","NOTICE","Log","WARNING","Warning","ERROR","Error","CRITICAL","Critical","FATAL","Fatal","EMERGENCY","ALL","createHandler","Sentry","getUser","undefined","getTags","getBreadcrumbCategory","getBreadcrumbType","shouldSendAsException","record","metadata","error","unhandled","shouldSendAsBreadcrumb","key","level","extra","message","extraData","captureException","user","tags","loggerKey","addBreadcrumb","category","type","data","timestamp","datetime","getTime","SentryHandler","constructor","minLevel","options","handle"],"mappings":"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"}