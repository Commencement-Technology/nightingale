{"version":3,"file":"index-node10.es.js","sources":["../src/index.ts"],"sourcesContent":["import { init, withScope, Severity } from '@sentry/node';\nimport { LogRecord, Handle } from 'nightingale-types';\nimport Level from 'nightingale-levels';\n\nconst mapToSentryLevel: Record<Level, string> = {\n  [Level.TRACE]: 'debug',\n  [Level.DEBUG]: 'debug',\n  [Level.INFO]: 'info',\n  [Level.NOTICE]: 'log',\n  [Level.WARNING]: 'warning',\n  [Level.ERROR]: 'error',\n  [Level.CRITICAL]: 'critical',\n  [Level.FATAL]: 'critical',\n  [Level.EMERGENCY]: 'critical',\n  // not a level\n  [Level.ALL]: 'fatal',\n};\n\nexport interface Options {\n  getUser?: <T>(record: LogRecord<T>) => any;\n  getTags?: <T>(record: LogRecord<T>) => any;\n}\n\nexport interface MetadataWithError {\n  error?: Error;\n}\n\nconst createHandler = (\n  dsn: string,\n  { getUser, getTags }: Options = {},\n): Handle => {\n  init({ dsn });\n\n  return <T extends MetadataWithError>(record: LogRecord<T>) => {\n    const { key, level, metadata, extra } = record;\n    const error = metadata && metadata.error;\n\n    if (!error) {\n      return;\n    }\n\n    const extraData = Object.assign({}, metadata, extra);\n    delete extraData.error;\n\n    withScope((scope) => {\n      scope.setLevel((mapToSentryLevel[level] || 'error') as Severity);\n      scope.setTag('loggerKey', key);\n\n      if (extraData) {\n        Object.keys(extraData).forEach((key) => {\n          scope.setExtra(key, extraData[key]);\n        });\n      }\n      if (getUser) {\n        const user = getUser(record);\n        if (user) scope.setUser(user);\n      }\n      if (getTags) {\n        const tags = getTags(record);\n        if (tags) {\n          Object.keys(tags).forEach((key) => {\n            scope.setTag(key, tags[key]);\n          });\n        }\n      }\n    });\n  };\n};\n\nexport default class SentryHandler {\n  minLevel: Level;\n\n  handle: Handle;\n\n  constructor(ravenUrl: string, minLevel: number, options?: Options) {\n    this.minLevel = minLevel;\n    this.handle = createHandler(ravenUrl, options);\n  }\n}\n"],"names":["mapToSentryLevel","Level","TRACE","DEBUG","INFO","NOTICE","WARNING","ERROR","CRITICAL","FATAL","EMERGENCY","ALL","createHandler","dsn","getUser","getTags","init","record","key","level","metadata","extra","error","extraData","Object","assign","withScope","scope","setLevel","setTag","keys","forEach","setExtra","user","setUser","tags","SentryHandler","constructor","ravenUrl","minLevel","options","handle"],"mappings":";;;AAIA,MAAMA,gBAAuC,GAAG;GAC7CC,KAAK,CAACC,KAAP,GAAe,OAD+B;GAE7CD,KAAK,CAACE,KAAP,GAAe,OAF+B;GAG7CF,KAAK,CAACG,IAAP,GAAc,MAHgC;GAI7CH,KAAK,CAACI,MAAP,GAAgB,KAJ8B;GAK7CJ,KAAK,CAACK,OAAP,GAAiB,SAL6B;GAM7CL,KAAK,CAACM,KAAP,GAAe,OAN+B;GAO7CN,KAAK,CAACO,QAAP,GAAkB,UAP4B;GAQ7CP,KAAK,CAACQ,KAAP,GAAe,UAR+B;GAS7CR,KAAK,CAACS,SAAP,GAAmB,UAT2B;;GAW7CT,KAAK,CAACU,GAAP,GAAa;CAXf;;AAuBA,MAAMC,aAAa,GAAG,CACpBC,GADoB,EAEpB;EAAEC,OAAF;EAAWC;IAAqB,EAFZ,KAGT;EACXC,IAAI,CAAC;IAAEH;GAAH,CAAJ;SAEqCI,MAA9B,IAAuD;UACtD;MAAEC,GAAF;MAAOC,KAAP;MAAcC,QAAd;MAAwBC;QAAUJ,MAAxC;UACMK,KAAK,GAAGF,QAAQ,IAAIA,QAAQ,CAACE,KAAnC;;QAEI,CAACA,KAAL,EAAY;;;;UAINC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,QAAlB,EAA4BC,KAA5B,CAAlB;WACOE,SAAS,CAACD,KAAjB;IAEAI,SAAS,CAAEC,KAAD,IAAW;MACnBA,KAAK,CAACC,QAAN,CAAgB5B,gBAAgB,CAACmB,KAAD,CAAhB,IAA2B,OAA3C;MACAQ,KAAK,CAACE,MAAN,CAAa,WAAb,EAA0BX,GAA1B;;UAEIK,SAAJ,EAAe;QACbC,MAAM,CAACM,IAAP,CAAYP,SAAZ,EAAuBQ,OAAvB,CAAgCb,GAAD,IAAS;UACtCS,KAAK,CAACK,QAAN,CAAed,GAAf,EAAoBK,SAAS,CAACL,GAAD,CAA7B;SADF;;;UAIEJ,OAAJ,EAAa;cACLmB,IAAI,GAAGnB,OAAO,CAACG,MAAD,CAApB;YACIgB,IAAJ,EAAUN,KAAK,CAACO,OAAN,CAAcD,IAAd;;;UAERlB,OAAJ,EAAa;cACLoB,IAAI,GAAGpB,OAAO,CAACE,MAAD,CAApB;;YACIkB,IAAJ,EAAU;UACRX,MAAM,CAACM,IAAP,CAAYK,IAAZ,EAAkBJ,OAAlB,CAA2Bb,GAAD,IAAS;YACjCS,KAAK,CAACE,MAAN,CAAaX,GAAb,EAAkBiB,IAAI,CAACjB,GAAD,CAAtB;WADF;;;KAhBG,CAAT;GAXF;CANF;;AA0CA,AAAe,MAAMkB,aAAN,CAAoB;EAKjCC,WAAW,CAACC,QAAD,EAAmBC,QAAnB,EAAqCC,OAArC,EAAwD;SAC5DD,QAAL,GAAgBA,QAAhB;SACKE,MAAL,GAAc7B,aAAa,CAAC0B,QAAD,EAAWE,OAAX,CAA3B;;;;;;;"}