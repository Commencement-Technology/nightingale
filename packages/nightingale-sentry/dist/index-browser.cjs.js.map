{"version":3,"file":"index-browser.cjs.js","sources":["../src/index.ts"],"sourcesContent":["import type {\n  addBreadcrumb,\n  captureException,\n  captureMessage,\n} from '@sentry/core';\nimport type { User, SeverityLevel } from '@sentry/types';\nimport { Level } from 'nightingale-levels';\nimport type { LogRecord, Handle, Metadata, Handler } from 'nightingale-types';\n\nconst mapToSentryLevel: Record<Level, SeverityLevel> = {\n  [Level.TRACE]: 'debug',\n  [Level.DEBUG]: 'debug',\n  [Level.INFO]: 'info',\n  [Level.NOTICE]: 'log',\n  [Level.WARNING]: 'warning',\n  [Level.ERROR]: 'error',\n  [Level.CRITICAL]: 'fatal',\n  [Level.FATAL]: 'fatal',\n  [Level.EMERGENCY]: 'fatal',\n  // not a level\n  [Level.ALL]: 'error',\n};\n\nexport interface MetadataWithError extends Metadata {\n  error?: Error;\n}\n\nexport interface Options {\n  getUser?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => User | undefined;\n  getTags?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => Record<string, string>;\n  getBreadcrumbCategory?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => string | undefined;\n  getBreadcrumbType?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => string | undefined;\n  shouldSendAsException?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => boolean;\n  shouldSendAsBreadcrumb?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => boolean;\n}\n\nexport interface SentryRequiredMethods {\n  addBreadcrumb: typeof addBreadcrumb;\n  captureException: typeof captureException;\n  captureMessage: typeof captureMessage;\n}\n\nconst createHandler = <S extends SentryRequiredMethods>(\n  Sentry: S,\n  {\n    getUser = () => undefined,\n    getTags = () => ({}),\n    getBreadcrumbCategory = () => undefined,\n    getBreadcrumbType = () => undefined,\n    shouldSendAsException = <T extends Metadata>(record: LogRecord<T>) =>\n      record.metadata?.error !== undefined &&\n      record.metadata.unhandled !== true,\n    shouldSendAsBreadcrumb = <T extends Metadata>(record: LogRecord<T>) =>\n      false,\n  }: Options = {},\n): Handle => {\n  return <T extends MetadataWithError>(record: LogRecord<T>) => {\n    const { key, level, metadata, extra } = record;\n\n    if (shouldSendAsException(record)) {\n      const error = metadata?.error || record.message;\n\n      const extraData: Record<string, unknown> = { ...metadata, ...extra };\n      delete extraData.error;\n\n      Sentry.captureException(error, {\n        level: mapToSentryLevel[level] || 'error',\n        user: getUser(record),\n        tags: {\n          loggerKey: key,\n          ...getTags(record),\n        },\n        extra: extraData,\n      });\n    } else if (shouldSendAsBreadcrumb(record)) {\n      Sentry.addBreadcrumb({\n        level: mapToSentryLevel[level] || 'error',\n        category: getBreadcrumbCategory(record),\n        type: getBreadcrumbType(record),\n        message: record.message,\n        data: record.metadata,\n        timestamp: record.datetime.getTime(),\n      });\n    }\n  };\n};\n\nexport class SentryHandler<S extends SentryRequiredMethods> implements Handler {\n  minLevel: Level;\n\n  handle: Handle;\n\n  constructor(Sentry: S, minLevel: Level, options?: Options) {\n    this.minLevel = minLevel;\n    this.handle = createHandler<S>(Sentry, options);\n  }\n}\n"],"names":["mapToSentryLevel","Level","TRACE","DEBUG","INFO","NOTICE","WARNING","ERROR","CRITICAL","FATAL","EMERGENCY","ALL","createHandler","Sentry","getUser","undefined","getTags","getBreadcrumbCategory","getBreadcrumbType","shouldSendAsException","record","metadata","error","unhandled","shouldSendAsBreadcrumb","key","level","extra","message","extraData","_extends","captureException","user","tags","loggerKey","addBreadcrumb","category","type","data","timestamp","datetime","getTime","SentryHandler","minLevel","options","handle"],"mappings":"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"}