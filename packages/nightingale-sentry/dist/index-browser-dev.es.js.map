{"version":3,"file":"index-browser-dev.es.js","sources":["../src/index.ts"],"sourcesContent":["import { POB_TARGET } from 'pob-babel';\nimport type {\n  addBreadcrumb,\n  captureException,\n  captureMessage,\n} from '@sentry/core';\nimport * as SentryNode from '@sentry/node';\nimport type { User } from '@sentry/types';\nimport { Severity } from '@sentry/types';\nimport Level from 'nightingale-levels';\nimport type { LogRecord, Handle, Metadata } from 'nightingale-types';\n\nconst mapToSentryLevel: Record<Level, Severity> = {\n  [Level.TRACE]: Severity.Debug,\n  [Level.DEBUG]: Severity.Debug,\n  [Level.INFO]: Severity.Info,\n  [Level.NOTICE]: Severity.Log,\n  [Level.WARNING]: Severity.Warning,\n  [Level.ERROR]: Severity.Error,\n  [Level.CRITICAL]: Severity.Critical,\n  [Level.FATAL]: Severity.Fatal,\n  [Level.EMERGENCY]: Severity.Critical,\n  // not a level\n  [Level.ALL]: Severity.Error,\n};\n\nexport interface MetadataWithError extends Metadata {\n  error?: Error;\n}\n\nexport interface Options {\n  getUser?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => User | undefined;\n  getTags?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => Record<string, string>;\n  getBreadcrumbCategory?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => string | undefined;\n  getBreadcrumbType?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => string | undefined;\n  shouldSendAsException?: <T extends MetadataWithError>(\n    record: LogRecord<T>,\n  ) => boolean;\n  shouldSendAsBreadcrumb?: <T extends Metadata>(\n    record: LogRecord<T>,\n  ) => boolean;\n}\n\ninterface SentryRequiredMethods {\n  addBreadcrumb: typeof addBreadcrumb;\n  captureException: typeof captureException;\n  captureMessage: typeof captureMessage;\n}\n\nconst createHandler = <S extends SentryRequiredMethods>(\n  Sentry: S,\n  {\n    getUser = () => undefined,\n    getTags = () => ({}),\n    getBreadcrumbCategory = () => undefined,\n    getBreadcrumbType = () => undefined,\n    shouldSendAsException = <T extends Metadata>(record: LogRecord<T>) =>\n      record.metadata?.error !== undefined,\n    shouldSendAsBreadcrumb = <T extends Metadata>(record: LogRecord<T>) =>\n      false,\n  }: Options = {},\n): Handle => {\n  return <T extends MetadataWithError>(record: LogRecord<T>) => {\n    const { key, level, metadata, extra } = record;\n\n    if (shouldSendAsException(record)) {\n      const error = metadata?.error || record.message;\n\n      const extraData: Record<string, unknown> = { ...metadata, ...extra };\n      delete extraData.error;\n\n      Sentry.captureException(error, {\n        level: mapToSentryLevel[level] || Severity.Error,\n        user: getUser(record),\n        tags: {\n          loggerKey: key,\n          ...getTags(record),\n        },\n        extra: extraData,\n      });\n    } else if (shouldSendAsBreadcrumb(record)) {\n      Sentry.addBreadcrumb({\n        level: mapToSentryLevel[level] || Severity.Error,\n        category: getBreadcrumbCategory(record),\n        type: getBreadcrumbType(record),\n        message: record.message,\n        data: record.metadata,\n        timestamp: record.datetime.getTime(),\n      });\n    }\n  };\n};\n\nexport default class SentryHandler<S extends SentryRequiredMethods> {\n  minLevel: Level;\n\n  handle: Handle;\n\n  constructor(Sentry: string | S, minLevel: number, options?: Options) {\n    this.minLevel = minLevel;\n    if (POB_TARGET === 'node' && typeof Sentry === 'string') {\n      console.warn(\n        'nightingale-sentry: Passing DSN directly is deprecated, pass Sentry instead and init in your app.',\n      );\n      SentryNode.init({ dsn: Sentry });\n      this.handle = createHandler(SentryNode, options);\n    } else {\n      this.handle = createHandler<S>(Sentry as S, options);\n    }\n  }\n}\n"],"names":["mapToSentryLevel","Level","TRACE","Severity","Debug","DEBUG","INFO","Info","NOTICE","Log","WARNING","Warning","ERROR","Error","CRITICAL","Critical","FATAL","Fatal","EMERGENCY","ALL","createHandler","Sentry","getUser","undefined","getTags","getBreadcrumbCategory","getBreadcrumbType","shouldSendAsException","record","metadata","error","shouldSendAsBreadcrumb","key","level","extra","message","extraData","captureException","user","tags","loggerKey","addBreadcrumb","category","type","data","timestamp","datetime","getTime","SentryHandler","minLevel","options","handle"],"mappings":"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"}